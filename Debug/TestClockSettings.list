
TestClockSettings.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003450  08003450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003458  08003458  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000404  200003bc  200003bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e664  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004814  00000000  00000000  0003e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000e857  00000000  00000000  00042ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000010e8  00000000  00000000  00051750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000015e9  00000000  00000000  00052838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024823  00000000  00000000  00053e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00027404  00000000  00000000  00078644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000dba48  00000000  00000000  0009fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003a70  00000000  00000000  0017b490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0017ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003418 	.word	0x08003418

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003418 	.word	0x08003418

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004c6:	4820      	ldr	r0, [pc, #128]	; (8000548 <MX_ADC1_Init+0x84>)
 80004c8:	4920      	ldr	r1, [pc, #128]	; (800054c <MX_ADC1_Init+0x88>)
 80004ca:	6001      	str	r1, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80004d0:	6041      	str	r1, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d2:	491f      	ldr	r1, [pc, #124]	; (8000550 <MX_ADC1_Init+0x8c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d4:	2300      	movs	r3, #0
{
 80004d6:	b085      	sub	sp, #20
  hadc1.Init.ScanConvMode = ENABLE;
 80004d8:	2201      	movs	r2, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004da:	e9c0 130a 	strd	r1, r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80004de:	2102      	movs	r1, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e0:	e9cd 3300 	strd	r3, r3, [sp]
 80004e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004ea:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ec:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ee:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 80004f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004f6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004fa:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004fc:	f000 fd80 	bl	8001000 <HAL_ADC_Init>
 8000500:	b9b0      	cbnz	r0, 8000530 <MX_ADC1_Init+0x6c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000502:	2108      	movs	r1, #8
  sConfig.Rank = 1;
 8000504:	2201      	movs	r2, #1
 8000506:	e9cd 1200 	strd	r1, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800050a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <MX_ADC1_Init+0x84>)
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800050e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000510:	4669      	mov	r1, sp
 8000512:	f000 fe21 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000516:	b998      	cbnz	r0, 8000540 <MX_ADC1_Init+0x7c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000518:	2209      	movs	r2, #9
  sConfig.Rank = 2;
 800051a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <MX_ADC1_Init+0x84>)
 800051e:	4669      	mov	r1, sp
  sConfig.Rank = 2;
 8000520:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000524:	f000 fe18 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000528:	b928      	cbnz	r0, 8000536 <MX_ADC1_Init+0x72>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800052a:	b005      	add	sp, #20
 800052c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000530:	f000 faf0 	bl	8000b14 <Error_Handler>
 8000534:	e7e5      	b.n	8000502 <MX_ADC1_Init+0x3e>
    Error_Handler();
 8000536:	f000 faed 	bl	8000b14 <Error_Handler>
}
 800053a:	b005      	add	sp, #20
 800053c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000540:	f000 fae8 	bl	8000b14 <Error_Handler>
 8000544:	e7e8      	b.n	8000518 <MX_ADC1_Init+0x54>
 8000546:	bf00      	nop
 8000548:	20000028 	.word	0x20000028
 800054c:	40012000 	.word	0x40012000
 8000550:	0f000001 	.word	0x0f000001

08000554 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000554:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <HAL_ADC_MspInit+0x94>)
 8000558:	6802      	ldr	r2, [r0, #0]
{
 800055a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 800055e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000564:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000568:	9407      	str	r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800056a:	d001      	beq.n	8000570 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800056c:	b008      	add	sp, #32
 800056e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000570:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000574:	9401      	str	r4, [sp, #4]
 8000576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000578:	4e1c      	ldr	r6, [pc, #112]	; (80005ec <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800057e:	645a      	str	r2, [r3, #68]	; 0x44
 8000580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000582:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	9402      	str	r4, [sp, #8]
 800058c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058e:	f042 0202 	orr.w	r2, r2, #2
 8000592:	631a      	str	r2, [r3, #48]	; 0x30
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800059e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	9a02      	ldr	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f001 f905 	bl	80017b8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005b0:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005b6:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ba:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c4:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005c6:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ca:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ce:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005d2:	f000 ff27 	bl	8001424 <HAL_DMA_Init>
 80005d6:	b918      	cbnz	r0, 80005e0 <HAL_ADC_MspInit+0x8c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005d8:	63ae      	str	r6, [r5, #56]	; 0x38
 80005da:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80005dc:	b008      	add	sp, #32
 80005de:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80005e0:	f000 fa98 	bl	8000b14 <Error_Handler>
 80005e4:	e7f8      	b.n	80005d8 <HAL_ADC_MspInit+0x84>
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	20000070 	.word	0x20000070
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40026410 	.word	0x40026410

080005f8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005f8:	b500      	push	{lr}

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <MX_DAC_Init+0x40>)
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_DAC_Init+0x44>)
 80005fe:	6002      	str	r2, [r0, #0]
{
 8000600:	b083      	sub	sp, #12
  DAC_ChannelConfTypeDef sConfig = {0};
 8000602:	2300      	movs	r3, #0
 8000604:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000608:	f000 fecc 	bl	80013a4 <HAL_DAC_Init>
 800060c:	b958      	cbnz	r0, 8000626 <MX_DAC_Init+0x2e>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060e:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000610:	233c      	movs	r3, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <MX_DAC_Init+0x40>)
 8000614:	4669      	mov	r1, sp
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000616:	e9cd 3200 	strd	r3, r2, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800061a:	f000 fed9 	bl	80013d0 <HAL_DAC_ConfigChannel>
 800061e:	b928      	cbnz	r0, 800062c <MX_DAC_Init+0x34>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000620:	b003      	add	sp, #12
 8000622:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000626:	f000 fa75 	bl	8000b14 <Error_Handler>
 800062a:	e7f0      	b.n	800060e <MX_DAC_Init+0x16>
    Error_Handler();
 800062c:	f000 fa72 	bl	8000b14 <Error_Handler>
}
 8000630:	b003      	add	sp, #12
 8000632:	f85d fb04 	ldr.w	pc, [sp], #4
 8000636:	bf00      	nop
 8000638:	200000d0 	.word	0x200000d0
 800063c:	40007400 	.word	0x40007400

08000640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000640:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC)
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <HAL_DAC_MspInit+0x5c>)
 8000644:	6801      	ldr	r1, [r0, #0]
{
 8000646:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC)
 800064a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000650:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000654:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC)
 8000656:	d001      	beq.n	800065c <HAL_DAC_MspInit+0x1c>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000658:	b009      	add	sp, #36	; 0x24
 800065a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 800065c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000664:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000668:	6411      	str	r1, [r2, #64]	; 0x40
 800066a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800066c:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8000670:	9001      	str	r0, [sp, #4]
 8000672:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
 8000680:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000688:	2510      	movs	r5, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068c:	2403      	movs	r4, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000690:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000692:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f001 f890 	bl	80017b8 <HAL_GPIO_Init>
}
 8000698:	b009      	add	sp, #36	; 0x24
 800069a:	bd30      	pop	{r4, r5, pc}
 800069c:	40007400 	.word	0x40007400
 80006a0:	40020000 	.word	0x40020000

080006a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a4:	b500      	push	{lr}
 80006a6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a8:	2200      	movs	r2, #0
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_DMA_Init+0x30>)
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80006b4:	6319      	str	r1, [r3, #48]	; 0x30
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006bc:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006be:	2038      	movs	r0, #56	; 0x38
 80006c0:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006c4:	f000 fe08 	bl	80012d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006c8:	2038      	movs	r0, #56	; 0x38

}
 80006ca:	b003      	add	sp, #12
 80006cc:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006d0:	f000 be40 	b.w	8001354 <HAL_NVIC_EnableIRQ>
 80006d4:	40023800 	.word	0x40023800

080006d8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80006d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	2400      	movs	r4, #0
{
 80006de:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80006e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x12c>)
 80006ea:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 80006f0:	4d45      	ldr	r5, [pc, #276]	; (8000808 <MX_GPIO_Init+0x130>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUD_RST_GPIO_Port, AUD_RST_Pin, GPIO_PIN_SET);
 80006f2:	4f46      	ldr	r7, [pc, #280]	; (800080c <MX_GPIO_Init+0x134>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f4:	f042 0210 	orr.w	r2, r2, #16
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
 80006fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fc:	f002 0210 	and.w	r2, r2, #16
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000704:	9402      	str	r4, [sp, #8]
 8000706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
 800070e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000710:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000714:	9202      	str	r2, [sp, #8]
 8000716:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000718:	9403      	str	r4, [sp, #12]
 800071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071c:	f042 0204 	orr.w	r2, r2, #4
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
 8000722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000724:	f002 0204 	and.w	r2, r2, #4
 8000728:	9203      	str	r2, [sp, #12]
 800072a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	9404      	str	r4, [sp, #16]
 800072e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000730:	f042 0201 	orr.w	r2, r2, #1
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
 8000736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000738:	f002 0201 	and.w	r2, r2, #1
 800073c:	9204      	str	r2, [sp, #16]
 800073e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	9405      	str	r4, [sp, #20]
 8000742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000744:	f042 0202 	orr.w	r2, r2, #2
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
 800074a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074c:	f002 0202 	and.w	r2, r2, #2
 8000750:	9205      	str	r2, [sp, #20]
 8000752:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	9406      	str	r4, [sp, #24]
 8000756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000758:	f042 0208 	orr.w	r2, r2, #8
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 8000766:	4622      	mov	r2, r4
 8000768:	4628      	mov	r0, r5
 800076a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 800076e:	f001 f945 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AUD_RST_GPIO_Port, AUD_RST_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	4638      	mov	r0, r7
 8000776:	2110      	movs	r1, #16
 8000778:	f001 f940 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 800077e:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8000782:	a907      	add	r1, sp, #28
 8000784:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 8000786:	f8cd 801c 	str.w	r8, [sp, #28]

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8000794:	f001 f810 	bl	80017b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000798:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800079e:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <MX_GPIO_Init+0x138>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ac:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b0:	f001 f802 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007b4:	a907      	add	r1, sp, #28
 80007b6:	4817      	ldr	r0, [pc, #92]	; (8000814 <MX_GPIO_Init+0x13c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007be:	f000 fffb 	bl	80017b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	4813      	ldr	r0, [pc, #76]	; (8000818 <MX_GPIO_Init+0x140>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f000 ffee 	bl	80017b8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(AUD_RST_GPIO_Port, &GPIO_InitStruct);
 80007dc:	a907      	add	r1, sp, #28
 80007de:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = AUD_RST_Pin;
 80007e0:	2310      	movs	r3, #16
 80007e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(AUD_RST_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f000 ffe5 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ACC_INT_1_Pin|ACC_INT_2_Pin;
 80007ee:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f0:	a907      	add	r1, sp, #28
 80007f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fa:	f000 ffdd 	bl	80017b8 <HAL_GPIO_Init>

}
 80007fe:	b00d      	add	sp, #52	; 0x34
 8000800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40021000 	.word	0x40021000
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400

0800081c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800081c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_I2C1_Init+0x30>)
 8000820:	4c0b      	ldr	r4, [pc, #44]	; (8000850 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	490c      	ldr	r1, [pc, #48]	; (8000854 <MX_I2C1_Init+0x38>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800082a:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000832:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000836:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	f001 f8e2 	bl	8001a04 <HAL_I2C_Init>
 8000840:	b900      	cbnz	r0, 8000844 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000842:	bd10      	pop	{r4, pc}
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000848:	f000 b964 	b.w	8000b14 <Error_Handler>
 800084c:	200000e4 	.word	0x200000e4
 8000850:	40005400 	.word	0x40005400
 8000854:	000186a0 	.word	0x000186a0

08000858 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000858:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_I2C_MspInit+0x64>)
 800085c:	6802      	ldr	r2, [r0, #0]
{
 800085e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8000862:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000868:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800086c:	9407      	str	r4, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800086e:	d001      	beq.n	8000874 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000870:	b009      	add	sp, #36	; 0x24
 8000872:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4d12      	ldr	r5, [pc, #72]	; (80008c0 <HAL_I2C_MspInit+0x68>)
 8000876:	9401      	str	r4, [sp, #4]
 8000878:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	632b      	str	r3, [r5, #48]	; 0x30
 8000882:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800088a:	23c0      	movs	r3, #192	; 0xc0
 800088c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088e:	2312      	movs	r3, #18
 8000890:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000892:	f04f 0c03 	mov.w	ip, #3
 8000896:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089a:	e9cd c306 	strd	ip, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f000 ff8a 	bl	80017b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a4:	9402      	str	r4, [sp, #8]
 80008a6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80008a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ac:	642b      	str	r3, [r5, #64]	; 0x40
 80008ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80008b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	9b02      	ldr	r3, [sp, #8]
}
 80008b8:	b009      	add	sp, #36	; 0x24
 80008ba:	bd30      	pop	{r4, r5, pc}
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400

080008c8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008c8:	b510      	push	{r4, lr}
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_I2S3_Init+0x34>)
 80008cc:	4c0c      	ldr	r4, [pc, #48]	; (8000900 <MX_I2S3_Init+0x38>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ce:	2300      	movs	r3, #0
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80008d4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008d8:	e9c0 4200 	strd	r4, r2, [r0]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80008e0:	e9c0 2104 	strd	r2, r1, [r0, #16]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008e8:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ea:	f001 f953 	bl	8001b94 <HAL_I2S_Init>
 80008ee:	b900      	cbnz	r0, 80008f2 <MX_I2S3_Init+0x2a>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80008f6:	f000 b90d 	b.w	8000b14 <Error_Handler>
 80008fa:	bf00      	nop
 80008fc:	20000138 	.word	0x20000138
 8000900:	40003c00 	.word	0x40003c00

08000904 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000904:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(i2sHandle->Instance==SPI3)
 8000906:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <HAL_I2S_MspInit+0xb0>)
 8000908:	6801      	ldr	r1, [r0, #0]
{
 800090a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	2300      	movs	r3, #0
  if(i2sHandle->Instance==SPI3)
 800090e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000914:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8000918:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091a:	9306      	str	r3, [sp, #24]
  if(i2sHandle->Instance==SPI3)
 800091c:	d001      	beq.n	8000922 <HAL_I2S_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800091e:	b00c      	add	sp, #48	; 0x30
 8000920:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000922:	2101      	movs	r1, #1
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000924:	22c0      	movs	r2, #192	; 0xc0
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000926:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	a803      	add	r0, sp, #12
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800092a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800092e:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	f001 fe62 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	2800      	cmp	r0, #0
 8000936:	d139      	bne.n	80009ac <HAL_I2S_MspInit+0xa8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <HAL_I2S_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <HAL_I2S_MspInit+0xb8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800093c:	2400      	movs	r4, #0
 800093e:	9400      	str	r4, [sp, #0]
 8000940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
 8000948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	9401      	str	r4, [sp, #4]
 8000954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000956:	f042 0204 	orr.w	r2, r2, #4
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
 800095c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800095e:	f002 0204 	and.w	r2, r2, #4
 8000962:	9201      	str	r2, [sp, #4]
 8000964:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	9402      	str	r4, [sp, #8]
 8000968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097a:	2606      	movs	r6, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800097e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000982:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f000 ff13 	bl	80017b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <HAL_I2S_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000998:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a0:	e9cd 460a 	strd	r4, r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f000 ff08 	bl	80017b8 <HAL_GPIO_Init>
}
 80009a8:	b00c      	add	sp, #48	; 0x30
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80009ac:	f000 f8b2 	bl	8000b14 <Error_Handler>
 80009b0:	e7c2      	b.n	8000938 <HAL_I2S_MspInit+0x34>
 80009b2:	bf00      	nop
 80009b4:	40003c00 	.word	0x40003c00
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020000 	.word	0x40020000

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	2300      	movs	r3, #0
{
 80009c8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80009ce:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80009d6:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4920      	ldr	r1, [pc, #128]	; (8000a5c <SystemClock_Config+0x98>)
 80009dc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009de:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80009e8:	6408      	str	r0, [r1, #64]	; 0x40
 80009ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80009ec:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80009f0:	9101      	str	r1, [sp, #4]
 80009f2:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	6813      	ldr	r3, [r2, #0]
 8000a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a06:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a12:	2304      	movs	r3, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a1a:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a22:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a26:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f001 fb0f 	bl	800204c <HAL_RCC_OscConfig>
 8000a2e:	b108      	cbz	r0, 8000a34 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	220f      	movs	r2, #15
 8000a36:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a3c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a44:	a803      	add	r0, sp, #12
 8000a46:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a48:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a4e:	f001 fd15 	bl	800247c <HAL_RCC_ClockConfig>
 8000a52:	b108      	cbz	r0, 8000a58 <SystemClock_Config+0x94>
 8000a54:	b672      	cpsid	i
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <SystemClock_Config+0x92>
}
 8000a58:	b015      	add	sp, #84	; 0x54
 8000a5a:	bd30      	pop	{r4, r5, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <main>:
{
 8000a64:	b500      	push	{lr}
 8000a66:	b083      	sub	sp, #12
  uint8_t uartTxTest = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_Init();
 8000a6e:	f000 fa89 	bl	8000f84 <HAL_Init>
  SystemClock_Config();
 8000a72:	f7ff ffa7 	bl	80009c4 <SystemClock_Config>
  MX_GPIO_Init();
 8000a76:	f7ff fe2f 	bl	80006d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7a:	f7ff fe13 	bl	80006a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a7e:	f7ff fd21 	bl	80004c4 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000a82:	f000 f8eb 	bl	8000c5c <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000a86:	f000 f9d3 	bl	8000e30 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000a8a:	f7ff fdb5 	bl	80005f8 <MX_DAC_Init>
  MX_I2C1_Init();
 8000a8e:	f7ff fec5 	bl	800081c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a92:	f7ff ff19 	bl	80008c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a96:	f000 f83f 	bl	8000b18 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000a9a:	f000 f95b 	bl	8000d54 <MX_TIM4_Init>
  HAL_UART_Receive_IT (&huart2, uart2rxBuffer, 1);
 8000a9e:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <main+0x64>)
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <main+0x68>)
	  HAL_UART_Transmit_IT ( &huart2, &uartTxTest, 1 );
 8000aa2:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <main+0x68>)
  HAL_UART_Receive_IT (&huart2, uart2rxBuffer, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f002 fa91 	bl	8002fcc <HAL_UART_Receive_IT>
	  ++uartTxTest;
 8000aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	  HAL_UART_Transmit_IT ( &huart2, &uartTxTest, 1 );
 8000aae:	2201      	movs	r2, #1
	  ++uartTxTest;
 8000ab0:	4413      	add	r3, r2
	  HAL_UART_Transmit_IT ( &huart2, &uartTxTest, 1 );
 8000ab2:	f10d 0107 	add.w	r1, sp, #7
 8000ab6:	4620      	mov	r0, r4
	  ++uartTxTest;
 8000ab8:	f88d 3007 	strb.w	r3, [sp, #7]
	  HAL_UART_Transmit_IT ( &huart2, &uartTxTest, 1 );
 8000abc:	f002 fa6a 	bl	8002f94 <HAL_UART_Transmit_IT>
      HAL_Delay(250);
 8000ac0:	20fa      	movs	r0, #250	; 0xfa
 8000ac2:	f000 fa8b 	bl	8000fdc <HAL_Delay>
  while (1)
 8000ac6:	e7f0      	b.n	8000aaa <main+0x46>
 8000ac8:	20000180 	.word	0x20000180
 8000acc:	20000370 	.word	0x20000370

08000ad0 <HAL_UART_TxCpltCallback>:
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <HAL_UART_RxCpltCallback>:
	if ( huart-> Instance == USART2 )
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_UART_RxCpltCallback+0x2c>)
 8000ad6:	6802      	ldr	r2, [r0, #0]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d000      	beq.n	8000ade <HAL_UART_RxCpltCallback+0xa>
 8000adc:	4770      	bx	lr
{
 8000ade:	b410      	push	{r4}
		uart2rxTempBuffer[++uart2rxTempBufferIndex] = uart2rxBuffer [0];
 8000ae0:	4c08      	ldr	r4, [pc, #32]	; (8000b04 <HAL_UART_RxCpltCallback+0x30>)
 8000ae2:	4909      	ldr	r1, [pc, #36]	; (8000b08 <HAL_UART_RxCpltCallback+0x34>)
 8000ae4:	7823      	ldrb	r3, [r4, #0]
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_UART_RxCpltCallback+0x38>)
 8000ae8:	7808      	ldrb	r0, [r1, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	7023      	strb	r3, [r4, #0]
 8000af0:	54d0      	strb	r0, [r2, r3]
}
 8000af2:	f85d 4b04 	ldr.w	r4, [sp], #4
		HAL_UART_Receive_IT (&huart2, uart2rxBuffer, 1);
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <HAL_UART_RxCpltCallback+0x3c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	f002 ba67 	b.w	8002fcc <HAL_UART_Receive_IT>
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	20000284 	.word	0x20000284
 8000b08:	20000180 	.word	0x20000180
 8000b0c:	20000184 	.word	0x20000184
 8000b10:	20000370 	.word	0x20000370

08000b14 <Error_Handler>:
 8000b14:	b672      	cpsid	i
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <Error_Handler+0x2>

08000b18 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b18:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x3c>)
 8000b1a:	490f      	ldr	r1, [pc, #60]	; (8000b58 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 8000b20:	b510      	push	{r4, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b22:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b24:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b28:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b2c:	2128      	movs	r1, #40	; 0x28
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8000b2e:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b34:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b38:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8000b40:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b44:	f001 fe22 	bl	800278c <HAL_SPI_Init>
 8000b48:	b900      	cbnz	r0, 8000b4c <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000b50:	f7ff bfe0 	b.w	8000b14 <Error_Handler>
 8000b54:	20000288 	.word	0x20000288
 8000b58:	40013000 	.word	0x40013000

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_SPI_MspInit+0x64>)
 8000b60:	6801      	ldr	r1, [r0, #0]
{
 8000b62:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8000b66:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000b6c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000b70:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000b72:	d001      	beq.n	8000b78 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b74:	b009      	add	sp, #36	; 0x24
 8000b76:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b78:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000b80:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000b84:	6451      	str	r1, [r2, #68]	; 0x44
 8000b86:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8000b88:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8000b8c:	9001      	str	r0, [sp, #4]
 8000b8e:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ba8:	25e0      	movs	r5, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bae:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f000 fdfe 	bl	80017b8 <HAL_GPIO_Init>
}
 8000bbc:	b009      	add	sp, #36	; 0x24
 8000bbe:	bd30      	pop	{r4, r5, pc}
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x34>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	9100      	str	r1, [sp, #0]
 8000bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bd6:	645a      	str	r2, [r3, #68]	; 0x44
 8000bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	9101      	str	r1, [sp, #4]
 8000be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bea:	641a      	str	r2, [r3, #64]	; 0x40
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler>
 8000c02:	bf00      	nop

08000c04 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <HardFault_Handler>
 8000c06:	bf00      	nop

08000c08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler>
 8000c0a:	bf00      	nop

08000c0c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <BusFault_Handler>
 8000c0e:	bf00      	nop

08000c10 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler>
 8000c12:	bf00      	nop

08000c14 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <DebugMon_Handler>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <PendSV_Handler>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 b9ca 	b.w	8000fb8 <HAL_IncTick>

08000c24 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c24:	4801      	ldr	r0, [pc, #4]	; (8000c2c <USART2_IRQHandler+0x8>)
 8000c26:	f002 ba69 	b.w	80030fc <HAL_UART_IRQHandler>
 8000c2a:	bf00      	nop
 8000c2c:	20000370 	.word	0x20000370

08000c30 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c30:	4801      	ldr	r0, [pc, #4]	; (8000c38 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8000c32:	f001 bea1 	b.w	8002978 <HAL_TIM_IRQHandler>
 8000c36:	bf00      	nop
 8000c38:	200002e0 	.word	0x200002e0

08000c3c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c3c:	4801      	ldr	r0, [pc, #4]	; (8000c44 <DMA2_Stream0_IRQHandler+0x8>)
 8000c3e:	f000 bce5 	b.w	800160c <HAL_DMA_IRQHandler>
 8000c42:	bf00      	nop
 8000c44:	20000070 	.word	0x20000070

08000c48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <SystemInit+0x10>)
 8000c4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000c4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <MX_TIM14_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000c5c:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <MX_TIM14_Init+0x2c>)
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <MX_TIM14_Init+0x30>)
  htim14.Init.Prescaler = 83;
 8000c62:	2253      	movs	r2, #83	; 0x53
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	2300      	movs	r3, #0
  htim14.Init.Prescaler = 83;
 8000c66:	e9c0 4200 	strd	r4, r2, [r0]
  htim14.Init.Period = 999;
 8000c6a:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c6e:	2280      	movs	r2, #128	; 0x80
  htim14.Init.Period = 999;
 8000c70:	e9c0 3102 	strd	r3, r1, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c76:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c78:	f001 ff86 	bl	8002b88 <HAL_TIM_Base_Init>
 8000c7c:	b900      	cbnz	r0, 8000c80 <MX_TIM14_Init+0x24>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c7e:	bd10      	pop	{r4, pc}
 8000c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000c84:	f7ff bf46 	b.w	8000b14 <Error_Handler>
 8000c88:	200002e0 	.word	0x200002e0
 8000c8c:	40002000 	.word	0x40002000

08000c90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_TIM_PWM_MspInit+0x2c>)
 8000c92:	6802      	ldr	r2, [r0, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d000      	beq.n	8000c9a <HAL_TIM_PWM_MspInit+0xa>
 8000c98:	4770      	bx	lr
{
 8000c9a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca6:	f042 0204 	orr.w	r2, r2, #4
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cb6:	b002      	add	sp, #8
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40000800 	.word	0x40000800

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM14)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_TIM_Base_MspInit+0x3c>)
 8000cc2:	6802      	ldr	r2, [r0, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d000      	beq.n	8000cca <HAL_TIM_Base_MspInit+0xa>
 8000cc8:	4770      	bx	lr
{
 8000cca:	b500      	push	{lr}
 8000ccc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f503 3306 	add.w	r3, r3, #137216	; 0x21800
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000cd8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000cdc:	6419      	str	r1, [r3, #64]	; 0x40
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce4:	9301      	str	r3, [sp, #4]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000ce6:	202d      	movs	r0, #45	; 0x2d
 8000ce8:	4611      	mov	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000cec:	f000 faf4 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cf0:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000cf2:	b003      	add	sp, #12
 8000cf4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cf8:	f000 bb2c 	b.w	8001354 <HAL_NVIC_EnableIRQ>
 8000cfc:	40002000 	.word	0x40002000

08000d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d00:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM4)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_TIM_MspPostInit+0x4c>)
 8000d04:	6801      	ldr	r1, [r0, #0]
{
 8000d06:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM4)
 8000d0a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000d10:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000d14:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8000d16:	d001      	beq.n	8000d1c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = PWM_GREEN_Pin|PWM_ORANGE_Pin|PWM_RED_Pin|PWM_BLUE_Pin;
 8000d34:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	e9cd 2401 	strd	r2, r4, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d42:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f000 fd38 	bl	80017b8 <HAL_GPIO_Init>
}
 8000d48:	b006      	add	sp, #24
 8000d4a:	bd10      	pop	{r4, pc}
 8000d4c:	40000800 	.word	0x40000800
 8000d50:	40020c00 	.word	0x40020c00

08000d54 <MX_TIM4_Init>:
{
 8000d54:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8000d56:	4834      	ldr	r0, [pc, #208]	; (8000e28 <MX_TIM4_Init+0xd4>)
 8000d58:	4a34      	ldr	r2, [pc, #208]	; (8000e2c <MX_TIM4_Init+0xd8>)
 8000d5a:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 83;
 8000d5c:	2253      	movs	r2, #83	; 0x53
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5e:	2300      	movs	r3, #0
{
 8000d60:	b08b      	sub	sp, #44	; 0x2c
  htim4.Init.Prescaler = 83;
 8000d62:	6042      	str	r2, [r0, #4]
  htim4.Init.Period = 999;
 8000d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d68:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6c:	2280      	movs	r2, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d72:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000d76:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000d7a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000d7e:	9309      	str	r3, [sp, #36]	; 0x24
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d82:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d84:	f001 ff2e 	bl	8002be4 <HAL_TIM_PWM_Init>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d135      	bne.n	8000df8 <MX_TIM4_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_TIM4_Init+0xd4>)
 8000d90:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d96:	f001 ffe9 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d140      	bne.n	8000e20 <MX_TIM4_Init+0xcc>
  sConfigOC.Pulse = 0;
 8000d9e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	4821      	ldr	r0, [pc, #132]	; (8000e28 <MX_TIM4_Init+0xd4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da6:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 8000da8:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dac:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dae:	f001 ff79 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000db2:	bb90      	cbnz	r0, 8000e1a <MX_TIM4_Init+0xc6>
  sConfigOC.Pulse = 499;
 8000db4:	f240 13f3 	movw	r3, #499	; 0x1f3
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db8:	481b      	ldr	r0, [pc, #108]	; (8000e28 <MX_TIM4_Init+0xd4>)
  sConfigOC.Pulse = 499;
 8000dba:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	a903      	add	r1, sp, #12
 8000dc0:	f001 ff70 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	bb30      	cbnz	r0, 8000e14 <MX_TIM4_Init+0xc0>
  sConfigOC.Pulse = 749;
 8000dc6:	f240 23ed 	movw	r3, #749	; 0x2ed
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dca:	4817      	ldr	r0, [pc, #92]	; (8000e28 <MX_TIM4_Init+0xd4>)
  sConfigOC.Pulse = 749;
 8000dcc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dce:	2208      	movs	r2, #8
 8000dd0:	a903      	add	r1, sp, #12
 8000dd2:	f001 ff67 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	b9d0      	cbnz	r0, 8000e0e <MX_TIM4_Init+0xba>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd8:	220c      	movs	r2, #12
  sConfigOC.Pulse = 999;
 8000dda:	f240 33e7 	movw	r3, #999	; 0x3e7
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dde:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_TIM4_Init+0xd4>)
  sConfigOC.Pulse = 999;
 8000de0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000de2:	eb0d 0102 	add.w	r1, sp, r2
 8000de6:	f001 ff5d 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	b940      	cbnz	r0, 8000dfe <MX_TIM4_Init+0xaa>
  HAL_TIM_MspPostInit(&htim4);
 8000dec:	480e      	ldr	r0, [pc, #56]	; (8000e28 <MX_TIM4_Init+0xd4>)
 8000dee:	f7ff ff87 	bl	8000d00 <HAL_TIM_MspPostInit>
}
 8000df2:	b00b      	add	sp, #44	; 0x2c
 8000df4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000df8:	f7ff fe8c 	bl	8000b14 <Error_Handler>
 8000dfc:	e7c6      	b.n	8000d8c <MX_TIM4_Init+0x38>
    Error_Handler();
 8000dfe:	f7ff fe89 	bl	8000b14 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <MX_TIM4_Init+0xd4>)
 8000e04:	f7ff ff7c 	bl	8000d00 <HAL_TIM_MspPostInit>
}
 8000e08:	b00b      	add	sp, #44	; 0x2c
 8000e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e0e:	f7ff fe81 	bl	8000b14 <Error_Handler>
 8000e12:	e7e1      	b.n	8000dd8 <MX_TIM4_Init+0x84>
    Error_Handler();
 8000e14:	f7ff fe7e 	bl	8000b14 <Error_Handler>
 8000e18:	e7d5      	b.n	8000dc6 <MX_TIM4_Init+0x72>
    Error_Handler();
 8000e1a:	f7ff fe7b 	bl	8000b14 <Error_Handler>
 8000e1e:	e7c9      	b.n	8000db4 <MX_TIM4_Init+0x60>
    Error_Handler();
 8000e20:	f7ff fe78 	bl	8000b14 <Error_Handler>
 8000e24:	e7bb      	b.n	8000d9e <MX_TIM4_Init+0x4a>
 8000e26:	bf00      	nop
 8000e28:	20000328 	.word	0x20000328
 8000e2c:	40000800 	.word	0x40000800

08000e30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e30:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_USART2_UART_Init+0x34>)
 8000e34:	4c0c      	ldr	r4, [pc, #48]	; (8000e68 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8000e36:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8000e3c:	e9c0 4200 	strd	r4, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	210c      	movs	r1, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000e42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e46:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4a:	e9c0 3104 	strd	r3, r1, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000e4e:	e9c0 3206 	strd	r3, r2, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	f002 f86d 	bl	8002f30 <HAL_UART_Init>
 8000e56:	b900      	cbnz	r0, 8000e5a <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e58:	bd10      	pop	{r4, pc}
 8000e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000e5e:	f7ff be59 	b.w	8000b14 <Error_Handler>
 8000e62:	bf00      	nop
 8000e64:	20000370 	.word	0x20000370
 8000e68:	40004400 	.word	0x40004400

08000e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e6c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_UART_MspInit+0x74>)
 8000e70:	6802      	ldr	r2, [r0, #0]
{
 8000e72:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8000e76:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000e7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e80:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e84:	b009      	add	sp, #36	; 0x24
 8000e86:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e88:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000e8c:	9401      	str	r4, [sp, #4]
 8000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e9e:	9201      	str	r2, [sp, #4]
 8000ea0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	9402      	str	r4, [sp, #8]
 8000ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb4:	220c      	movs	r2, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f000 fc76 	bl	80017b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ecc:	4622      	mov	r2, r4
 8000ece:	4621      	mov	r1, r4
 8000ed0:	2026      	movs	r0, #38	; 0x26
 8000ed2:	f000 fa01 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed6:	2026      	movs	r0, #38	; 0x26
 8000ed8:	f000 fa3c 	bl	8001354 <HAL_NVIC_EnableIRQ>
}
 8000edc:	b009      	add	sp, #36	; 0x24
 8000ede:	bd30      	pop	{r4, r5, pc}
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eec:	f7ff feac 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f002 fa5b 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fda3 	bl	8000a64 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f2c:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8000f30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f34:	200003bc 	.word	0x200003bc

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_InitTick+0x3c>)
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_InitTick+0x40>)
 8000f42:	7812      	ldrb	r2, [r2, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
{
 8000f46:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f50:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f54:	f000 fa0c 	bl	8001370 <HAL_SYSTICK_Config>
 8000f58:	b908      	cbnz	r0, 8000f5e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	2d0f      	cmp	r5, #15
 8000f5c:	d901      	bls.n	8000f62 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
 8000f62:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	4602      	mov	r2, r0
 8000f66:	4629      	mov	r1, r5
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f9b4 	bl	80012d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_InitTick+0x44>)
 8000f72:	4620      	mov	r0, r4
 8000f74:	601d      	str	r5, [r3, #0]
}
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008

08000f84 <HAL_Init>:
{
 8000f84:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x30>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f9e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f987 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f7ff ffc8 	bl	8000f3c <HAL_InitTick>
  HAL_MspInit();
 8000fac:	f7ff fe0c 	bl	8000bc8 <HAL_MspInit>
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	bd08      	pop	{r3, pc}
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x10>)
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_IncTick+0x14>)
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200003b8 	.word	0x200003b8
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_GetTick+0x8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200003b8 	.word	0x200003b8

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff6 	bl	8000fd0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fe6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000fe8:	d002      	beq.n	8000ff0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_Delay+0x20>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	1b43      	subs	r3, r0, r5
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	d3fa      	bcc.n	8000ff0 <HAL_Delay+0x14>
  {
  }
}
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8001000:	2800      	cmp	r0, #0
 8001002:	f000 809e 	beq.w	8001142 <HAL_ADC_Init+0x142>
{
 8001006:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001008:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800100a:	4604      	mov	r4, r0
 800100c:	b13d      	cbz	r5, 800101e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001010:	06db      	lsls	r3, r3, #27
 8001012:	d50c      	bpl.n	800102e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001014:	2300      	movs	r3, #0
 8001016:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800101a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800101c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800101e:	f7ff fa99 	bl	8000554 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001022:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001024:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001026:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102a:	06db      	lsls	r3, r3, #27
 800102c:	d4f2      	bmi.n	8001014 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001030:	4a47      	ldr	r2, [pc, #284]	; (8001150 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001036:	f023 0302 	bic.w	r3, r3, #2
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001040:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001042:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001044:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001048:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800104a:	6851      	ldr	r1, [r2, #4]
 800104c:	6860      	ldr	r0, [r4, #4]
 800104e:	4301      	orrs	r1, r0
 8001050:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001052:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001054:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001056:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001066:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001068:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800106a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800106e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	430a      	orrs	r2, r1
 8001074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001076:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001078:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800107a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	4302      	orrs	r2, r0
 8001084:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001086:	4a33      	ldr	r2, [pc, #204]	; (8001154 <HAL_ADC_Init+0x154>)
 8001088:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800108a:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800108c:	d051      	beq.n	8001132 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800108e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001092:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	4311      	orrs	r1, r2
 800109a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4302      	orrs	r2, r0
 80010a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	f022 0202 	bic.w	r2, r2, #2
 80010b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	7e21      	ldrb	r1, [r4, #24]
 80010b6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80010ba:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80010bc:	f894 2020 	ldrb.w	r2, [r4, #32]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d040      	beq.n	8001146 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010c4:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010cc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80010d4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	3901      	subs	r1, #1
 80010da:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80010de:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010e2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ec:	3901      	subs	r1, #1
 80010ee:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010f4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010f6:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8001104:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8001108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001112:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001114:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001116:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800111a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800111c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001120:	f023 0303 	bic.w	r3, r3, #3
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800112a:	2300      	movs	r3, #0
 800112c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001130:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e7b3      	b.n	80010aa <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
}
 8001144:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	e7c7      	b.n	80010e0 <HAL_ADC_Init+0xe0>
 8001150:	40012300 	.word	0x40012300
 8001154:	0f000001 	.word	0x0f000001

08001158 <HAL_ADC_ConfigChannel>:
{
 8001158:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800115a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800115e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001160:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001162:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001164:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001166:	f000 809b 	beq.w	80012a0 <HAL_ADC_ConfigChannel+0x148>
 800116a:	2301      	movs	r3, #1
 800116c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001170:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001172:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001174:	2c09      	cmp	r4, #9
 8001176:	d82c      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800117e:	f04f 0c07 	mov.w	ip, #7
 8001182:	fa0c fc05 	lsl.w	ip, ip, r5
 8001186:	ea22 020c 	bic.w	r2, r2, ip
 800118a:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800118c:	688a      	ldr	r2, [r1, #8]
 800118e:	40aa      	lsls	r2, r5
 8001190:	691d      	ldr	r5, [r3, #16]
 8001192:	432a      	orrs	r2, r5
 8001194:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8001196:	684a      	ldr	r2, [r1, #4]
 8001198:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800119a:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 800119c:	d82f      	bhi.n	80011fe <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800119e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011a4:	3a05      	subs	r2, #5
 80011a6:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011aa:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ae:	fa0e f202 	lsl.w	r2, lr, r2
 80011b2:	ea21 0202 	bic.w	r2, r1, r2
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	ea4c 0202 	orr.w	r2, ip, r2
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <HAL_ADC_ConfigChannel+0x150>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d030      	beq.n	8001228 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 80011c6:	2300      	movs	r3, #0
 80011c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011cc:	4618      	mov	r0, r3
}
 80011ce:	b003      	add	sp, #12
 80011d0:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d2:	fa1f fc84 	uxth.w	ip, r4
 80011d6:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	f1ae 0e1e 	sub.w	lr, lr, #30
 80011e0:	2507      	movs	r5, #7
 80011e2:	fa05 f50e 	lsl.w	r5, r5, lr
 80011e6:	ea22 0205 	bic.w	r2, r2, r5
 80011ea:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ec:	688a      	ldr	r2, [r1, #8]
 80011ee:	68dd      	ldr	r5, [r3, #12]
 80011f0:	fa02 f20e 	lsl.w	r2, r2, lr
 80011f4:	432a      	orrs	r2, r5
 80011f6:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80011f8:	684a      	ldr	r2, [r1, #4]
 80011fa:	2a06      	cmp	r2, #6
 80011fc:	d9cf      	bls.n	800119e <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Rank < 13U)
 80011fe:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001200:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8001204:	d836      	bhi.n	8001274 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001208:	3a23      	subs	r2, #35	; 0x23
 800120a:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800120c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001210:	fa05 f202 	lsl.w	r2, r5, r2
 8001214:	ea21 0202 	bic.w	r2, r1, r2
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121c:	ea4c 0202 	orr.w	r2, ip, r2
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001222:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <HAL_ADC_ConfigChannel+0x150>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d1ce      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
 8001228:	2c12      	cmp	r4, #18
 800122a:	d032      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x13a>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800122c:	f1a4 0310 	sub.w	r3, r4, #16
 8001230:	2b01      	cmp	r3, #1
 8001232:	d8c8      	bhi.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_ADC_ConfigChannel+0x154>)
 8001236:	6853      	ldr	r3, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001238:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800123a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800123e:	6053      	str	r3, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001240:	d1c1      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_ADC_ConfigChannel+0x158>)
 8001244:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800124e:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001260:	9b01      	ldr	r3, [sp, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0af      	beq.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8001266:	9b01      	ldr	r3, [sp, #4]
 8001268:	3b01      	subs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800126c:	9b01      	ldr	r3, [sp, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x10e>
 8001272:	e7a8      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001276:	3a41      	subs	r2, #65	; 0x41
 8001278:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800127a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800127e:	fa05 f202 	lsl.w	r2, r5, r2
 8001282:	ea21 0202 	bic.w	r2, r1, r2
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128a:	ea4c 0202 	orr.w	r2, ip, r2
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001290:	e796      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001292:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001296:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800129e:	e792      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 80012a0:	2002      	movs	r0, #2
}
 80012a2:	b003      	add	sp, #12
 80012a4:	bd30      	pop	{r4, r5, pc}
 80012a6:	bf00      	nop
 80012a8:	40012000 	.word	0x40012000
 80012ac:	40012300 	.word	0x40012300
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012ce:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_NVIC_SetPriority+0x74>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e2:	f1c3 0e07 	rsb	lr, r3, #7
 80012e6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ee:	bf28      	it	cs
 80012f0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f4:	f1bc 0f06 	cmp.w	ip, #6
 80012f8:	d91b      	bls.n	8001332 <HAL_NVIC_SetPriority+0x5a>
 80012fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001300:	fa0c fc03 	lsl.w	ip, ip, r3
 8001304:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 3cff 	mov.w	ip, #4294967295
 800130c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001310:	ea21 010c 	bic.w	r1, r1, ip
 8001314:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001316:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800131c:	db0c      	blt.n	8001338 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001322:	0109      	lsls	r1, r1, #4
 8001324:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001328:	b2c9      	uxtb	r1, r1
 800132a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001332:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001334:	4613      	mov	r3, r2
 8001336:	e7e7      	b.n	8001308 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_NVIC_SetPriority+0x78>)
 800133a:	f000 000f 	and.w	r0, r0, #15
 800133e:	0109      	lsls	r1, r1, #4
 8001340:	4403      	add	r3, r0
 8001342:	b2c9      	uxtb	r1, r1
 8001344:	7619      	strb	r1, [r3, #24]
 8001346:	f85d fb04 	ldr.w	pc, [sp], #4
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	e000ecfc 	.word	0xe000ecfc

08001354 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001354:	2800      	cmp	r0, #0
 8001356:	db07      	blt.n	8001368 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_NVIC_EnableIRQ+0x18>)
 800135a:	0941      	lsrs	r1, r0, #5
 800135c:	2301      	movs	r3, #1
 800135e:	f000 001f 	and.w	r0, r0, #31
 8001362:	4083      	lsls	r3, r0
 8001364:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	3801      	subs	r0, #1
 8001372:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001376:	d210      	bcs.n	800139a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001378:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	4c08      	ldr	r4, [pc, #32]	; (80013a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001380:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001386:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001392:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	6119      	str	r1, [r3, #16]
 8001398:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2001      	movs	r0, #1
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80013a4:	b188      	cbz	r0, 80013ca <HAL_DAC_Init+0x26>
{
 80013a6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80013a8:	7903      	ldrb	r3, [r0, #4]
 80013aa:	4604      	mov	r4, r0
 80013ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013b0:	b13b      	cbz	r3, 80013c2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013b2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80013b4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013b6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80013b8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013ba:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80013bc:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80013be:	4618      	mov	r0, r3
}
 80013c0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80013c2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80013c4:	f7ff f93c 	bl	8000640 <HAL_DAC_MspInit>
 80013c8:	e7f3      	b.n	80013b2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80013d0:	b320      	cbz	r0, 800141c <HAL_DAC_ConfigChannel+0x4c>
 80013d2:	b319      	cbz	r1, 800141c <HAL_DAC_ConfigChannel+0x4c>
 80013d4:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013d6:	7940      	ldrb	r0, [r0, #5]
 80013d8:	2801      	cmp	r0, #1
 80013da:	d021      	beq.n	8001420 <HAL_DAC_ConfigChannel+0x50>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013dc:	2002      	movs	r0, #2
{
 80013de:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 80013e0:	7118      	strb	r0, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80013e2:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 80013e6:	681c      	ldr	r4, [r3, #0]
               << (Channel & 0x10UL));
 80013e8:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 80013ec:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80013ee:	4301      	orrs	r1, r0
               << (Channel & 0x10UL));
 80013f0:	f640 70fe 	movw	r0, #4094	; 0xffe
 80013f4:	4090      	lsls	r0, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80013f6:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013fa:	4091      	lsls	r1, r2
 80013fc:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013fe:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001400:	6821      	ldr	r1, [r4, #0]
 8001402:	20c0      	movs	r0, #192	; 0xc0
 8001404:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001408:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800140a:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 800140e:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001410:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001412:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8001414:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return status;
 8001416:	4628      	mov	r0, r5
}
 8001418:	bc30      	pop	{r4, r5}
 800141a:	4770      	bx	lr
    return HAL_ERROR;
 800141c:	2001      	movs	r0, #1
 800141e:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001420:	2002      	movs	r0, #2
}
 8001422:	4770      	bx	lr

08001424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff fdd2 	bl	8000fd0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142c:	2c00      	cmp	r4, #0
 800142e:	d067      	beq.n	8001500 <HAL_DMA_Init+0xdc>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001430:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001432:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001434:	2102      	movs	r1, #2
 8001436:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800143a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	4605      	mov	r5, r0
 8001446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e005      	b.n	8001456 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fdc1 	bl	8000fd0 <HAL_GetTick>
 800144e:	1b43      	subs	r3, r0, r5
 8001450:	2b05      	cmp	r3, #5
 8001452:	d839      	bhi.n	80014c8 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	07d1      	lsls	r1, r2, #31
 800145a:	d4f6      	bmi.n	800144a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001460:	68e1      	ldr	r1, [r4, #12]
 8001462:	4302      	orrs	r2, r0
 8001464:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	432a      	orrs	r2, r5
 800146e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001470:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8001472:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001474:	4302      	orrs	r2, r0
 8001476:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001478:	4933      	ldr	r1, [pc, #204]	; (8001548 <HAL_DMA_Init+0x124>)
 800147a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800147c:	6a25      	ldr	r5, [r4, #32]
 800147e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001480:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001482:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001484:	2904      	cmp	r1, #4
 8001486:	d026      	beq.n	80014d6 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001488:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800148a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800148c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001490:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	4a2d      	ldr	r2, [pc, #180]	; (800154c <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8001496:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001498:	3810      	subs	r0, #16
 800149a:	fba2 5200 	umull	r5, r2, r2, r0
 800149e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a0:	492b      	ldr	r1, [pc, #172]	; (8001550 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a6:	5c89      	ldrb	r1, [r1, r2]
 80014a8:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014aa:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80014ae:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014b0:	bf88      	it	hi
 80014b2:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b4:	223f      	movs	r2, #63	; 0x3f
 80014b6:	408a      	lsls	r2, r1
 80014b8:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ba:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80014be:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ca:	2220      	movs	r2, #32
 80014cc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80014d2:	4618      	mov	r0, r3
}
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d6:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80014da:	4329      	orrs	r1, r5
 80014dc:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 80014de:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80014e0:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80014e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e4:	f021 0107 	bic.w	r1, r1, #7
 80014e8:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80014ea:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d0cf      	beq.n	8001492 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014f2:	b938      	cbnz	r0, 8001504 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d023      	beq.n	8001540 <HAL_DMA_Init+0x11c>
 80014f8:	f032 0202 	bics.w	r2, r2, #2
 80014fc:	d1c9      	bne.n	8001492 <HAL_DMA_Init+0x6e>
 80014fe:	e008      	b.n	8001512 <HAL_DMA_Init+0xee>
    return HAL_ERROR;
 8001500:	2001      	movs	r0, #1
}
 8001502:	bd38      	pop	{r3, r4, r5, pc}
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001504:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001508:	d00c      	beq.n	8001524 <HAL_DMA_Init+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800150a:	2a02      	cmp	r2, #2
 800150c:	d903      	bls.n	8001516 <HAL_DMA_Init+0xf2>
 800150e:	2a03      	cmp	r2, #3
 8001510:	d1bf      	bne.n	8001492 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001512:	01ea      	lsls	r2, r5, #7
 8001514:	d5bd      	bpl.n	8001492 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8001516:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800151c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001520:	4618      	mov	r0, r3
}
 8001522:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001524:	2a03      	cmp	r2, #3
 8001526:	d8b4      	bhi.n	8001492 <HAL_DMA_Init+0x6e>
 8001528:	a001      	add	r0, pc, #4	; (adr r0, 8001530 <HAL_DMA_Init+0x10c>)
 800152a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001517 	.word	0x08001517
 8001534:	08001513 	.word	0x08001513
 8001538:	08001517 	.word	0x08001517
 800153c:	08001541 	.word	0x08001541
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001540:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001544:	d1a5      	bne.n	8001492 <HAL_DMA_Init+0x6e>
 8001546:	e7e6      	b.n	8001516 <HAL_DMA_Init+0xf2>
 8001548:	f010803f 	.word	0xf010803f
 800154c:	aaaaaaab 	.word	0xaaaaaaab
 8001550:	08003448 	.word	0x08003448

08001554 <HAL_DMA_Abort>:
{
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001558:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800155a:	f7ff fd39 	bl	8000fd0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001562:	2b02      	cmp	r3, #2
 8001564:	d006      	beq.n	8001574 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800156a:	2300      	movs	r3, #0
 800156c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f022 0216 	bic.w	r2, r2, #22
 800157c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001584:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001586:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001588:	4605      	mov	r5, r0
 800158a:	b342      	cbz	r2, 80015de <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f022 0208 	bic.w	r2, r2, #8
 8001592:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159c:	e005      	b.n	80015aa <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159e:	f7ff fd17 	bl	8000fd0 <HAL_GetTick>
 80015a2:	1b43      	subs	r3, r0, r5
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d810      	bhi.n	80015ca <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f013 0301 	ands.w	r3, r3, #1
 80015b0:	d1f5      	bne.n	800159e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80015b4:	223f      	movs	r2, #63	; 0x3f
 80015b6:	408a      	lsls	r2, r1
  return HAL_OK;
 80015b8:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80015ba:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80015bc:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015be:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80015c0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80015c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015cc:	2220      	movs	r2, #32
 80015ce:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80015d0:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80015d6:	2300      	movs	r3, #0
 80015d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d1d3      	bne.n	800158c <HAL_DMA_Abort+0x38>
 80015e4:	e7d6      	b.n	8001594 <HAL_DMA_Abort+0x40>
 80015e6:	bf00      	nop

080015e8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d003      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80015f4:	2001      	movs	r0, #1
 80015f6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80015f8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80015fa:	2305      	movs	r3, #5
 80015fc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8001606:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	4770      	bx	lr

0800160c <HAL_DMA_IRQHandler>:
{
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8001610:	4a67      	ldr	r2, [pc, #412]	; (80017b0 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001612:	6d87      	ldr	r7, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001614:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800161a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800161c:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800161e:	2208      	movs	r2, #8
 8001620:	409a      	lsls	r2, r3
 8001622:	422a      	tst	r2, r5
{
 8001624:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001626:	d003      	beq.n	8001630 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001628:	6801      	ldr	r1, [r0, #0]
 800162a:	6808      	ldr	r0, [r1, #0]
 800162c:	0740      	lsls	r0, r0, #29
 800162e:	d478      	bmi.n	8001722 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001630:	2201      	movs	r2, #1
 8001632:	409a      	lsls	r2, r3
 8001634:	422a      	tst	r2, r5
 8001636:	d003      	beq.n	8001640 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001638:	6821      	ldr	r1, [r4, #0]
 800163a:	6949      	ldr	r1, [r1, #20]
 800163c:	0608      	lsls	r0, r1, #24
 800163e:	d46a      	bmi.n	8001716 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001640:	2204      	movs	r2, #4
 8001642:	409a      	lsls	r2, r3
 8001644:	422a      	tst	r2, r5
 8001646:	d003      	beq.n	8001650 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001648:	6821      	ldr	r1, [r4, #0]
 800164a:	6809      	ldr	r1, [r1, #0]
 800164c:	0789      	lsls	r1, r1, #30
 800164e:	d45c      	bmi.n	800170a <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	2210      	movs	r2, #16
 8001652:	409a      	lsls	r2, r3
 8001654:	422a      	tst	r2, r5
 8001656:	d003      	beq.n	8001660 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001658:	6821      	ldr	r1, [r4, #0]
 800165a:	6808      	ldr	r0, [r1, #0]
 800165c:	0700      	lsls	r0, r0, #28
 800165e:	d441      	bmi.n	80016e4 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001660:	2220      	movs	r2, #32
 8001662:	409a      	lsls	r2, r3
 8001664:	422a      	tst	r2, r5
 8001666:	d014      	beq.n	8001692 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001668:	6821      	ldr	r1, [r4, #0]
 800166a:	6808      	ldr	r0, [r1, #0]
 800166c:	06c0      	lsls	r0, r0, #27
 800166e:	d510      	bpl.n	8001692 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001670:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001672:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001676:	2a05      	cmp	r2, #5
 8001678:	d063      	beq.n	8001742 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800167a:	680b      	ldr	r3, [r1, #0]
 800167c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001680:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001682:	d07e      	beq.n	8001782 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001684:	0319      	lsls	r1, r3, #12
 8001686:	f140 8089 	bpl.w	800179c <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800168a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800168c:	b10b      	cbz	r3, 8001692 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800168e:	4620      	mov	r0, r4
 8001690:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001692:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001694:	b323      	cbz	r3, 80016e0 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001696:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001698:	07da      	lsls	r2, r3, #31
 800169a:	d51a      	bpl.n	80016d2 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 800169c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800169e:	4945      	ldr	r1, [pc, #276]	; (80017b4 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a0:	2305      	movs	r3, #5
 80016a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80016a6:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016a8:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80016ac:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80016b0:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e002      	b.n	80016bc <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	07db      	lsls	r3, r3, #31
 80016ba:	d504      	bpl.n	80016c6 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80016bc:	9b01      	ldr	r3, [sp, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	42b3      	cmp	r3, r6
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	d9f7      	bls.n	80016b6 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 80016c6:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80016c8:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80016ca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80016ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80016d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016d4:	b123      	cbz	r3, 80016e0 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80016d6:	4620      	mov	r0, r4
}
 80016d8:	b003      	add	sp, #12
 80016da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80016de:	4718      	bx	r3
}
 80016e0:	b003      	add	sp, #12
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016e4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016e6:	680a      	ldr	r2, [r1, #0]
 80016e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ec:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ee:	d122      	bne.n	8001736 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f0:	05d2      	lsls	r2, r2, #23
 80016f2:	d403      	bmi.n	80016fc <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f4:	680a      	ldr	r2, [r1, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80016fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d0ae      	beq.n	8001660 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001702:	4620      	mov	r0, r4
 8001704:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001706:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001708:	e7aa      	b.n	8001660 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800170a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800170c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800170e:	f042 0204 	orr.w	r2, r2, #4
 8001712:	6562      	str	r2, [r4, #84]	; 0x54
 8001714:	e79c      	b.n	8001650 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001716:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001718:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800171a:	f042 0202 	orr.w	r2, r2, #2
 800171e:	6562      	str	r2, [r4, #84]	; 0x54
 8001720:	e78e      	b.n	8001640 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001722:	6808      	ldr	r0, [r1, #0]
 8001724:	f020 0004 	bic.w	r0, r0, #4
 8001728:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800172a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800172c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	6562      	str	r2, [r4, #84]	; 0x54
 8001734:	e77c      	b.n	8001630 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001736:	0311      	lsls	r1, r2, #12
 8001738:	d5e0      	bpl.n	80016fc <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800173a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800173c:	2a00      	cmp	r2, #0
 800173e:	d1e0      	bne.n	8001702 <HAL_DMA_IRQHandler+0xf6>
 8001740:	e78e      	b.n	8001660 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001742:	680a      	ldr	r2, [r1, #0]
 8001744:	f022 0216 	bic.w	r2, r2, #22
 8001748:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800174a:	694a      	ldr	r2, [r1, #20]
 800174c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001750:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001752:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001754:	b33a      	cbz	r2, 80017a6 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001756:	680a      	ldr	r2, [r1, #0]
 8001758:	f022 0208 	bic.w	r2, r2, #8
 800175c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175e:	223f      	movs	r2, #63	; 0x3f
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001764:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001766:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001768:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800176a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 800176c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001770:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001774:	2900      	cmp	r1, #0
 8001776:	d0b3      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001778:	4620      	mov	r0, r4
}
 800177a:	b003      	add	sp, #12
 800177c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001780:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001782:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001786:	d180      	bne.n	800168a <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001788:	680a      	ldr	r2, [r1, #0]
 800178a:	f022 0210 	bic.w	r2, r2, #16
 800178e:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001790:	2201      	movs	r2, #1
 8001792:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001796:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800179a:	e776      	b.n	800168a <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800179c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f af75 	bne.w	800168e <HAL_DMA_IRQHandler+0x82>
 80017a4:	e775      	b.n	8001692 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d1d4      	bne.n	8001756 <HAL_DMA_IRQHandler+0x14a>
 80017ac:	e7d7      	b.n	800175e <HAL_DMA_IRQHandler+0x152>
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000
 80017b4:	1b4e81b5 	.word	0x1b4e81b5

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017bc:	2200      	movs	r2, #0
 80017be:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	f8df a230 	ldr.w	sl, [pc, #560]	; 80019f4 <HAL_GPIO_Init+0x23c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c4:	4e84      	ldr	r6, [pc, #528]	; (80019d8 <HAL_GPIO_Init+0x220>)
{
 80017c6:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c8:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ca:	4689      	mov	r9, r1
 80017cc:	e005      	b.n	80017da <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	3301      	adds	r3, #1
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	f102 0202 	add.w	r2, r2, #2
 80017d6:	f000 808a 	beq.w	80018ee <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 80017da:	2101      	movs	r1, #1
 80017dc:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80017e2:	43a1      	bics	r1, r4
 80017e4:	d1f3      	bne.n	80017ce <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80017ea:	f00c 0103 	and.w	r1, ip, #3
 80017ee:	1e4d      	subs	r5, r1, #1
 80017f0:	2d01      	cmp	r5, #1
 80017f2:	d97f      	bls.n	80018f4 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f4:	2903      	cmp	r1, #3
 80017f6:	f040 80c0 	bne.w	800197a <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017fa:	4091      	lsls	r1, r2
 80017fc:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80017fe:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001800:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001802:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001804:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001808:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180a:	d0e0      	beq.n	80017ce <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	2100      	movs	r1, #0
 800180e:	9103      	str	r1, [sp, #12]
 8001810:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001814:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001818:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800181c:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001820:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001824:	9103      	str	r1, [sp, #12]
 8001826:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001828:	f023 0103 	bic.w	r1, r3, #3
 800182c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001830:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001834:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001838:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800183a:	00bf      	lsls	r7, r7, #2
 800183c:	f04f 0e0f 	mov.w	lr, #15
 8001840:	fa0e fe07 	lsl.w	lr, lr, r7
 8001844:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001848:	4d64      	ldr	r5, [pc, #400]	; (80019dc <HAL_GPIO_Init+0x224>)
 800184a:	42a8      	cmp	r0, r5
 800184c:	d024      	beq.n	8001898 <HAL_GPIO_Init+0xe0>
 800184e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001852:	42a8      	cmp	r0, r5
 8001854:	f000 8095 	beq.w	8001982 <HAL_GPIO_Init+0x1ca>
 8001858:	4d61      	ldr	r5, [pc, #388]	; (80019e0 <HAL_GPIO_Init+0x228>)
 800185a:	42a8      	cmp	r0, r5
 800185c:	f000 8098 	beq.w	8001990 <HAL_GPIO_Init+0x1d8>
 8001860:	4d60      	ldr	r5, [pc, #384]	; (80019e4 <HAL_GPIO_Init+0x22c>)
 8001862:	42a8      	cmp	r0, r5
 8001864:	f000 809b 	beq.w	800199e <HAL_GPIO_Init+0x1e6>
 8001868:	4d5f      	ldr	r5, [pc, #380]	; (80019e8 <HAL_GPIO_Init+0x230>)
 800186a:	42a8      	cmp	r0, r5
 800186c:	f000 809e 	beq.w	80019ac <HAL_GPIO_Init+0x1f4>
 8001870:	4d5e      	ldr	r5, [pc, #376]	; (80019ec <HAL_GPIO_Init+0x234>)
 8001872:	42a8      	cmp	r0, r5
 8001874:	f000 80a1 	beq.w	80019ba <HAL_GPIO_Init+0x202>
 8001878:	4d5d      	ldr	r5, [pc, #372]	; (80019f0 <HAL_GPIO_Init+0x238>)
 800187a:	42a8      	cmp	r0, r5
 800187c:	f000 80a4 	beq.w	80019c8 <HAL_GPIO_Init+0x210>
 8001880:	f8df e174 	ldr.w	lr, [pc, #372]	; 80019f8 <HAL_GPIO_Init+0x240>
 8001884:	4570      	cmp	r0, lr
 8001886:	bf0c      	ite	eq
 8001888:	f04f 0e07 	moveq.w	lr, #7
 800188c:	f04f 0e08 	movne.w	lr, #8
 8001890:	fa0e f707 	lsl.w	r7, lr, r7
 8001894:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001898:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 800189c:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800189e:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80018a6:	bf0c      	ite	eq
 80018a8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80018aa:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80018ae:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80018b0:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b2:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80018b6:	bf0c      	ite	eq
 80018b8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80018ba:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80018be:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80018c0:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80018c6:	bf0c      	ite	eq
 80018c8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80018ca:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80018ce:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d2:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80018da:	bf0c      	ite	eq
 80018dc:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80018de:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80018e4:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	f102 0202 	add.w	r2, r2, #2
 80018ea:	f47f af76 	bne.w	80017da <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 80018ee:	b005      	add	sp, #20
 80018f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f4:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80018f8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fc:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	2503      	movs	r5, #3
 8001902:	fa05 f802 	lsl.w	r8, r5, r2
 8001906:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800190e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001910:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001912:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	f3cc 1700 	ubfx	r7, ip, #4, #1
 800191a:	409f      	lsls	r7, r3
 800191c:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 8001924:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001926:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001928:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001930:	4097      	lsls	r7, r2
 8001932:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001938:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	fa01 f102 	lsl.w	r1, r1, r2
 800193e:	f47f af5e 	bne.w	80017fe <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8001942:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001946:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800194e:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001952:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001954:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001958:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195c:	fa07 f708 	lsl.w	r7, r7, r8
 8001960:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	270f      	movs	r7, #15
 8001964:	fa07 f808 	lsl.w	r8, r7, r8
 8001968:	9f00      	ldr	r7, [sp, #0]
 800196a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800196e:	9f01      	ldr	r7, [sp, #4]
 8001970:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001974:	f8ce 7020 	str.w	r7, [lr, #32]
 8001978:	e741      	b.n	80017fe <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197a:	2503      	movs	r5, #3
 800197c:	4095      	lsls	r5, r2
 800197e:	43ed      	mvns	r5, r5
 8001980:	e7d1      	b.n	8001926 <HAL_GPIO_Init+0x16e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001982:	f04f 0e01 	mov.w	lr, #1
 8001986:	fa0e f707 	lsl.w	r7, lr, r7
 800198a:	ea48 0807 	orr.w	r8, r8, r7
 800198e:	e783      	b.n	8001898 <HAL_GPIO_Init+0xe0>
 8001990:	f04f 0e02 	mov.w	lr, #2
 8001994:	fa0e f707 	lsl.w	r7, lr, r7
 8001998:	ea48 0807 	orr.w	r8, r8, r7
 800199c:	e77c      	b.n	8001898 <HAL_GPIO_Init+0xe0>
 800199e:	f04f 0e03 	mov.w	lr, #3
 80019a2:	fa0e f707 	lsl.w	r7, lr, r7
 80019a6:	ea48 0807 	orr.w	r8, r8, r7
 80019aa:	e775      	b.n	8001898 <HAL_GPIO_Init+0xe0>
 80019ac:	f04f 0e04 	mov.w	lr, #4
 80019b0:	fa0e f707 	lsl.w	r7, lr, r7
 80019b4:	ea48 0807 	orr.w	r8, r8, r7
 80019b8:	e76e      	b.n	8001898 <HAL_GPIO_Init+0xe0>
 80019ba:	f04f 0e05 	mov.w	lr, #5
 80019be:	fa0e f707 	lsl.w	r7, lr, r7
 80019c2:	ea48 0807 	orr.w	r8, r8, r7
 80019c6:	e767      	b.n	8001898 <HAL_GPIO_Init+0xe0>
 80019c8:	f04f 0e06 	mov.w	lr, #6
 80019cc:	fa0e f707 	lsl.w	r7, lr, r7
 80019d0:	ea48 0807 	orr.w	r8, r8, r7
 80019d4:	e760      	b.n	8001898 <HAL_GPIO_Init+0xe0>
 80019d6:	bf00      	nop
 80019d8:	40013c00 	.word	0x40013c00
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40021c00 	.word	0x40021c00

080019fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	b902      	cbnz	r2, 8001a00 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fe:	0409      	lsls	r1, r1, #16
 8001a00:	6181      	str	r1, [r0, #24]
  }
}
 8001a02:	4770      	bx	lr

08001a04 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f000 80b9 	beq.w	8001b7c <HAL_I2C_Init+0x178>
{
 8001a0a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a10:	4604      	mov	r4, r0
 8001a12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8098 	beq.w	8001b4c <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a1c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a3c:	f000 fdbc 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a40:	6865      	ldr	r5, [r4, #4]
 8001a42:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_I2C_Init+0x17c>)
 8001a44:	429d      	cmp	r5, r3
 8001a46:	d84f      	bhi.n	8001ae8 <HAL_I2C_Init+0xe4>
 8001a48:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <HAL_I2C_Init+0x180>)
 8001a4a:	4298      	cmp	r0, r3
 8001a4c:	d97c      	bls.n	8001b48 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a50:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8001a52:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a56:	1e43      	subs	r3, r0, #1
 8001a58:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5c:	6822      	ldr	r2, [r4, #0]
 8001a5e:	6851      	ldr	r1, [r2, #4]
 8001a60:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001a64:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8001a68:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a6a:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8001a6c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a70:	f10c 0c01 	add.w	ip, ip, #1
 8001a74:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001a78:	ea41 010c 	orr.w	r1, r1, ip
 8001a7c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a7e:	69d1      	ldr	r1, [r2, #28]
 8001a80:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001a84:	3301      	adds	r3, #1
 8001a86:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001a8a:	4203      	tst	r3, r0
 8001a8c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001a90:	d161      	bne.n	8001b56 <HAL_I2C_Init+0x152>
 8001a92:	2304      	movs	r3, #4
 8001a94:	430b      	orrs	r3, r1
 8001a96:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a98:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001a9c:	6811      	ldr	r1, [r2, #0]
 8001a9e:	4303      	orrs	r3, r0
 8001aa0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aa8:	6891      	ldr	r1, [r2, #8]
 8001aaa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001aae:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001ab2:	4303      	orrs	r3, r0
 8001ab4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001abc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001ac0:	68d1      	ldr	r1, [r2, #12]
 8001ac2:	4303      	orrs	r3, r0
 8001ac4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001acc:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ace:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8001ad0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8001ad6:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad8:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ade:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8001ae4:	4618      	mov	r0, r3
}
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_I2C_Init+0x188>)
 8001aea:	4298      	cmp	r0, r3
 8001aec:	d92c      	bls.n	8001b48 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aee:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001af2:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001af4:	4e26      	ldr	r6, [pc, #152]	; (8001b90 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001af6:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001afa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001afe:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8001b02:	6051      	str	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b04:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b08:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	fba6 6303 	umull	r6, r3, r6, r3
 8001b14:	6a11      	ldr	r1, [r2, #32]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b22:	69d1      	ldr	r1, [r2, #28]
 8001b24:	68a3      	ldr	r3, [r4, #8]
 8001b26:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001b2a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b2e:	b9ab      	cbnz	r3, 8001b5c <HAL_I2C_Init+0x158>
 8001b30:	1e43      	subs	r3, r0, #1
 8001b32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b36:	fbb3 f3f5 	udiv	r3, r3, r5
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	b1d3      	cbz	r3, 8001b78 <HAL_I2C_Init+0x174>
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b46:	e7a5      	b.n	8001a94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
}
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001b4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001b50:	f7fe fe82 	bl	8000858 <HAL_I2C_MspInit>
 8001b54:	e762      	b.n	8001a1c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5a:	e79b      	b.n	8001a94 <HAL_I2C_Init+0x90>
 8001b5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001b60:	1e43      	subs	r3, r0, #1
 8001b62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001b66:	fbb3 f3f5 	udiv	r3, r3, r5
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b70:	b113      	cbz	r3, 8001b78 <HAL_I2C_Init+0x174>
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b76:	e78d      	b.n	8001a94 <HAL_I2C_Init+0x90>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e78b      	b.n	8001a94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
}
 8001b7e:	4770      	bx	lr
 8001b80:	000186a0 	.word	0x000186a0
 8001b84:	001e847f 	.word	0x001e847f
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	003d08ff 	.word	0x003d08ff
 8001b90:	10624dd3 	.word	0x10624dd3

08001b94 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b94:	2800      	cmp	r0, #0
 8001b96:	f000 808e 	beq.w	8001cb6 <HAL_I2S_Init+0x122>
{
 8001b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d07a      	beq.n	8001ca0 <HAL_I2S_Init+0x10c>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001baa:	6821      	ldr	r1, [r4, #0]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bac:	6960      	ldr	r0, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bb4:	69cb      	ldr	r3, [r1, #28]
 8001bb6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bba:	f023 030f 	bic.w	r3, r3, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bbe:	4290      	cmp	r0, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bc0:	61cb      	str	r3, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8001bc2:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bc4:	d06a      	beq.n	8001c9c <HAL_I2S_Init+0x108>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bc6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      packetlength = 32U;
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	bf0c      	ite	eq
 8001bce:	2510      	moveq	r5, #16
 8001bd0:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bd2:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bd4:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001bd6:	bf98      	it	ls
 8001bd8:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bda:	f000 fdad 	bl	8002738 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bde:	6922      	ldr	r2, [r4, #16]
 8001be0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001be4:	d063      	beq.n	8001cae <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001be6:	fbb0 f0f5 	udiv	r0, r0, r5
 8001bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bee:	6961      	ldr	r1, [r4, #20]
 8001bf0:	0043      	lsls	r3, r0, #1
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001bf6:	4932      	ldr	r1, [pc, #200]	; (8001cc0 <HAL_I2S_Init+0x12c>)
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bf8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001bfa:	fba1 1303 	umull	r1, r3, r1, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001bfe:	0918      	lsrs	r0, r3, #4
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c00:	1e81      	subs	r1, r0, #2
 8001c02:	29fd      	cmp	r1, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c08:	d905      	bls.n	8001c16 <HAL_I2S_Init+0x82>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
    return  HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c12:	6463      	str	r3, [r4, #68]	; 0x44

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c16:	6821      	ldr	r1, [r4, #0]
 8001c18:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c20:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001c24:	69cb      	ldr	r3, [r1, #28]
 8001c26:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8001cd4 <HAL_I2S_Init+0x140>
 8001c2a:	68e6      	ldr	r6, [r4, #12]
 8001c2c:	69a7      	ldr	r7, [r4, #24]
 8001c2e:	ea03 030c 	and.w	r3, r3, ip
 8001c32:	ea42 0500 	orr.w	r5, r2, r0
 8001c36:	432b      	orrs	r3, r5
 8001c38:	4333      	orrs	r3, r6
 8001c3a:	433b      	orrs	r3, r7
 8001c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c40:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c42:	6a23      	ldr	r3, [r4, #32]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d123      	bne.n	8001c90 <HAL_I2S_Init+0xfc>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_I2S_Init+0x130>)
 8001c4a:	4d1f      	ldr	r5, [pc, #124]	; (8001cc8 <HAL_I2S_Init+0x134>)
 8001c4c:	4299      	cmp	r1, r3
 8001c4e:	bf18      	it	ne
 8001c50:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_I2S_Init+0x138>)
 8001c56:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c58:	69eb      	ldr	r3, [r5, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c5e:	ea03 030c 	and.w	r3, r3, ip
 8001c62:	61eb      	str	r3, [r5, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c64:	bf18      	it	ne
 8001c66:	fab2 f282 	clzne	r2, r2
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c6a:	f04f 0302 	mov.w	r3, #2
 8001c6e:	622b      	str	r3, [r5, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c70:	bf18      	it	ne
 8001c72:	0952      	lsrne	r2, r2, #5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c74:	69eb      	ldr	r3, [r5, #28]
                         (uint16_t)tmp                   | \
 8001c76:	bf14      	ite	ne
 8001c78:	0212      	lslne	r2, r2, #8
 8001c7a:	f44f 7280 	moveq.w	r2, #256	; 0x100
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c7e:	4330      	orrs	r0, r6
 8001c80:	4302      	orrs	r2, r0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c84:	433a      	orrs	r2, r7
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c8e:	61eb      	str	r3, [r5, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c90:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c92:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c94:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8001c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c9c:	6922      	ldr	r2, [r4, #16]
 8001c9e:	e7bd      	b.n	8001c1c <HAL_I2S_Init+0x88>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_I2S_Init+0x13c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001ca2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ca6:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8001ca8:	f7fe fe2c 	bl	8000904 <HAL_I2S_MspInit>
 8001cac:	e77d      	b.n	8001baa <HAL_I2S_Init+0x16>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001cae:	68e3      	ldr	r3, [r4, #12]
 8001cb0:	b11b      	cbz	r3, 8001cba <HAL_I2S_Init+0x126>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cb2:	00ad      	lsls	r5, r5, #2
 8001cb4:	e797      	b.n	8001be6 <HAL_I2S_Init+0x52>
    return HAL_ERROR;
 8001cb6:	2001      	movs	r0, #1
}
 8001cb8:	4770      	bx	lr
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cba:	00ed      	lsls	r5, r5, #3
 8001cbc:	e793      	b.n	8001be6 <HAL_I2S_Init+0x52>
 8001cbe:	bf00      	nop
 8001cc0:	cccccccd 	.word	0xcccccccd
 8001cc4:	40003800 	.word	0x40003800
 8001cc8:	40003400 	.word	0x40003400
 8001ccc:	08001df1 	.word	0x08001df1
 8001cd0:	08001ce5 	.word	0x08001ce5
 8001cd4:	fffff040 	.word	0xfffff040

08001cd8 <HAL_I2S_TxCpltCallback>:
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop

08001cdc <HAL_I2S_RxCpltCallback>:
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <HAL_I2S_ErrorCallback>:
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop

08001ce4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ce4:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ce6:	6803      	ldr	r3, [r0, #0]
{
 8001ce8:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001cee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001cf2:	2a04      	cmp	r2, #4
{
 8001cf4:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001cf6:	d005      	beq.n	8001d04 <I2S_IRQHandler+0x20>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cf8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d031      	beq.n	8001d64 <I2S_IRQHandler+0x80>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d00:	b004      	add	sp, #16
 8001d02:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d04:	9a01      	ldr	r2, [sp, #4]
 8001d06:	07d1      	lsls	r1, r2, #31
 8001d08:	d50f      	bpl.n	8001d2a <I2S_IRQHandler+0x46>
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	0652      	lsls	r2, r2, #25
 8001d0e:	d50c      	bpl.n	8001d2a <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d10:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8001d18:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8001d1a:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001d22:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001d24:	b292      	uxth	r2, r2
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d04a      	beq.n	8001dc0 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d2a:	9b01      	ldr	r3, [sp, #4]
 8001d2c:	0659      	lsls	r1, r3, #25
 8001d2e:	d5e3      	bpl.n	8001cf8 <I2S_IRQHandler+0x14>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	0692      	lsls	r2, r2, #26
 8001d36:	d5df      	bpl.n	8001cf8 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d38:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d3a:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d40:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d42:	9102      	str	r1, [sp, #8]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	9202      	str	r2, [sp, #8]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d4c:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d4e:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d56:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8001d5a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d5c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d5e:	f7ff ffbf 	bl	8001ce0 <HAL_I2S_ErrorCallback>
 8001d62:	e7c9      	b.n	8001cf8 <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d64:	9b01      	ldr	r3, [sp, #4]
 8001d66:	079b      	lsls	r3, r3, #30
 8001d68:	d50f      	bpl.n	8001d8a <I2S_IRQHandler+0xa6>
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	0610      	lsls	r0, r2, #24
 8001d70:	d50b      	bpl.n	8001d8a <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d74:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001d78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8001d7c:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	b292      	uxth	r2, r2
 8001d82:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001d84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d86:	b292      	uxth	r2, r2
 8001d88:	b322      	cbz	r2, 8001dd4 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d8a:	9b01      	ldr	r3, [sp, #4]
 8001d8c:	0719      	lsls	r1, r3, #28
 8001d8e:	d5b7      	bpl.n	8001d00 <I2S_IRQHandler+0x1c>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	0692      	lsls	r2, r2, #26
 8001d96:	d5b3      	bpl.n	8001d00 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d98:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d9a:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001da0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001da2:	9103      	str	r1, [sp, #12]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8001da8:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001daa:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8001dac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001db0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001db2:	f043 0304 	orr.w	r3, r3, #4
      HAL_I2S_ErrorCallback(hi2s);
 8001db6:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001db8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001dba:	f7ff ff91 	bl	8001ce0 <HAL_I2S_ErrorCallback>
}
 8001dbe:	e79f      	b.n	8001d00 <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc0:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001dc2:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dc8:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001dca:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001dce:	f7ff ff85 	bl	8001cdc <HAL_I2S_RxCpltCallback>
 8001dd2:	e7aa      	b.n	8001d2a <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd4:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001dd6:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ddc:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8001dde:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8001de0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001de4:	f7ff ff78 	bl	8001cd8 <HAL_I2S_TxCpltCallback>
 8001de8:	e7cf      	b.n	8001d8a <I2S_IRQHandler+0xa6>
 8001dea:	bf00      	nop

08001dec <HAL_I2SEx_TxRxCpltCallback>:
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001df0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001df2:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001df4:	4a93      	ldr	r2, [pc, #588]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001df6:	688b      	ldr	r3, [r1, #8]
{
 8001df8:	b086      	sub	sp, #24
 8001dfa:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001dfc:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001dfe:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001e00:	4291      	cmp	r1, r2
 8001e02:	bf18      	it	ne
 8001e04:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	9201      	str	r2, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001e0c:	684a      	ldr	r2, [r1, #4]
 8001e0e:	9202      	str	r2, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	9203      	str	r2, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e14:	6842      	ldr	r2, [r0, #4]
 8001e16:	f432 7200 	bics.w	r2, r2, #512	; 0x200
 8001e1a:	d078      	beq.n	8001f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x11e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e1c:	9a01      	ldr	r2, [sp, #4]
 8001e1e:	0792      	lsls	r2, r2, #30
 8001e20:	d51a      	bpl.n	8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8001e22:	9a03      	ldr	r2, [sp, #12]
 8001e24:	0611      	lsls	r1, r2, #24
 8001e26:	d517      	bpl.n	8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001e28:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001e2a:	1c91      	adds	r1, r2, #2
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	6241      	str	r1, [r0, #36]	; 0x24
 8001e30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e32:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001e34:	3a01      	subs	r2, #1
 8001e36:	b292      	uxth	r2, r2
 8001e38:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e3a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	b95a      	cbnz	r2, 8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e46:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e48:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b923      	cbnz	r3, 8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e54:	f7ff ffca 	bl	8001dec <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e58:	9b00      	ldr	r3, [sp, #0]
 8001e5a:	07da      	lsls	r2, r3, #31
 8001e5c:	d51c      	bpl.n	8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8001e5e:	9b02      	ldr	r3, [sp, #8]
 8001e60:	065b      	lsls	r3, r3, #25
 8001e62:	d519      	bpl.n	8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	1c98      	adds	r0, r3, #2
 8001e6a:	68d1      	ldr	r1, [r2, #12]
 8001e6c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001e6e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001e70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b963      	cbnz	r3, 8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e7e:	6853      	ldr	r3, [r2, #4]
 8001e80:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e84:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001e86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b92b      	cbnz	r3, 8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ffaa 	bl	8001dec <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e98:	9b00      	ldr	r3, [sp, #0]
 8001e9a:	0658      	lsls	r0, r3, #25
 8001e9c:	d51b      	bpl.n	8001ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	0699      	lsls	r1, r3, #26
 8001ea2:	d518      	bpl.n	8001ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea4:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea6:	4867      	ldr	r0, [pc, #412]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea8:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eac:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eb0:	4282      	cmp	r2, r0
 8001eb2:	bf18      	it	ne
 8001eb4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb8:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eba:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ebc:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ebe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ec2:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eca:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8001ece:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ed0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ed2:	f7ff ff05 	bl	8001ce0 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ed6:	9b01      	ldr	r3, [sp, #4]
 8001ed8:	071a      	lsls	r2, r3, #28
 8001eda:	d571      	bpl.n	8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8001edc:	9b03      	ldr	r3, [sp, #12]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	d56e      	bpl.n	8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	4957      	ldr	r1, [pc, #348]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001ee6:	4b58      	ldr	r3, [pc, #352]	; (8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001ee8:	428a      	cmp	r2, r1
 8001eea:	bf18      	it	ne
 8001eec:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef0:	f04f 0c01 	mov.w	ip, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001efa:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001efc:	6853      	ldr	r3, [r2, #4]
 8001efe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001f02:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001f04:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	e050      	b.n	8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f0e:	9b00      	ldr	r3, [sp, #0]
 8001f10:	079a      	lsls	r2, r3, #30
 8001f12:	d502      	bpl.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
 8001f14:	9b02      	ldr	r3, [sp, #8]
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	d454      	bmi.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f1a:	9b01      	ldr	r3, [sp, #4]
 8001f1c:	07d8      	lsls	r0, r3, #31
 8001f1e:	d502      	bpl.n	8001f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001f20:	9b03      	ldr	r3, [sp, #12]
 8001f22:	0659      	lsls	r1, r3, #25
 8001f24:	d469      	bmi.n	8001ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x20a>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f26:	9b01      	ldr	r3, [sp, #4]
 8001f28:	065a      	lsls	r2, r3, #25
 8001f2a:	d522      	bpl.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x182>
 8001f2c:	9b03      	ldr	r3, [sp, #12]
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	d51f      	bpl.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x182>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	4943      	ldr	r1, [pc, #268]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001f36:	4a44      	ldr	r2, [pc, #272]	; (8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	bf18      	it	ne
 8001f3c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f40:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f42:	6851      	ldr	r1, [r2, #4]
 8001f44:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001f48:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f50:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f52:	9004      	str	r0, [sp, #16]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	9204      	str	r2, [sp, #16]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001f5c:	2101      	movs	r1, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f5e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001f60:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f66:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8001f6a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f6c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001f6e:	f7ff feb7 	bl	8001ce0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	0718      	lsls	r0, r3, #28
 8001f76:	d523      	bpl.n	8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8001f78:	9b02      	ldr	r3, [sp, #8]
 8001f7a:	0699      	lsls	r1, r3, #26
 8001f7c:	d520      	bpl.n	8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f7e:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f80:	4830      	ldr	r0, [pc, #192]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f82:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f86:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f8a:	4283      	cmp	r3, r0
 8001f8c:	bf18      	it	ne
 8001f8e:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f92:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f94:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f96:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f98:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001f9c:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f9e:	9005      	str	r0, [sp, #20]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa4:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fa6:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fac:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001fae:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001fb6:	b006      	add	sp, #24
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8001fbc:	f7ff be90 	b.w	8001ce0 <HAL_I2S_ErrorCallback>
}
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd10      	pop	{r4, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fc6:	1c9a      	adds	r2, r3, #2
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	6242      	str	r2, [r0, #36]	; 0x24
 8001fcc:	60cb      	str	r3, [r1, #12]
  hi2s->TxXferCount--;
 8001fce:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001fd6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d19d      	bne.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fde:	684b      	ldr	r3, [r1, #4]
 8001fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fe4:	604b      	str	r3, [r1, #4]
    if (hi2s->RxXferCount == 0U)
 8001fe6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d195      	bne.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ff4:	f7ff fefa 	bl	8001dec <HAL_I2SEx_TxRxCpltCallback>
 8001ff8:	e78f      	b.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001ffa:	6820      	ldr	r0, [r4, #0]
 8001ffc:	4911      	ldr	r1, [pc, #68]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8002000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002002:	4288      	cmp	r0, r1
 8002004:	bf18      	it	ne
 8002006:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800200a:	1c98      	adds	r0, r3, #2
 800200c:	68d1      	ldr	r1, [r2, #12]
 800200e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002010:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002012:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800201a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d181      	bne.n	8001f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002022:	6853      	ldr	r3, [r2, #4]
 8002024:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002028:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 800202a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	f47f af79 	bne.w	8001f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002034:	2301      	movs	r3, #1
 8002036:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff fed6 	bl	8001dec <HAL_I2SEx_TxRxCpltCallback>
 8002040:	e771      	b.n	8001f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8002042:	bf00      	nop
 8002044:	40003800 	.word	0x40003800
 8002048:	40003400 	.word	0x40003400

0800204c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	f000 81a2 	beq.w	8002396 <HAL_RCC_OscConfig+0x34a>
{
 8002052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	6803      	ldr	r3, [r0, #0]
 8002058:	07dd      	lsls	r5, r3, #31
{
 800205a:	b082      	sub	sp, #8
 800205c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	d52f      	bpl.n	80020c0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002060:	499e      	ldr	r1, [pc, #632]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 8002062:	688a      	ldr	r2, [r1, #8]
 8002064:	f002 020c 	and.w	r2, r2, #12
 8002068:	2a04      	cmp	r2, #4
 800206a:	f000 80ed 	beq.w	8002248 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	688a      	ldr	r2, [r1, #8]
 8002070:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002074:	2a08      	cmp	r2, #8
 8002076:	f000 80e3 	beq.w	8002240 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	f000 80ec 	beq.w	800225c <HAL_RCC_OscConfig+0x210>
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002088:	f000 8175 	beq.w	8002376 <HAL_RCC_OscConfig+0x32a>
 800208c:	4d93      	ldr	r5, [pc, #588]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 800208e:	682a      	ldr	r2, [r5, #0]
 8002090:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002094:	602a      	str	r2, [r5, #0]
 8002096:	682a      	ldr	r2, [r5, #0]
 8002098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800209c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 80e1 	bne.w	8002266 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff94 	bl	8000fd0 <HAL_GetTick>
 80020a8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e005      	b.n	80020b8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7fe ff90 	bl	8000fd0 <HAL_GetTick>
 80020b0:	1b80      	subs	r0, r0, r6
 80020b2:	2864      	cmp	r0, #100	; 0x64
 80020b4:	f200 8101 	bhi.w	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	039b      	lsls	r3, r3, #14
 80020bc:	d4f6      	bmi.n	80020ac <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	079f      	lsls	r7, r3, #30
 80020c2:	d528      	bpl.n	8002116 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c4:	4a85      	ldr	r2, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 80020c6:	6891      	ldr	r1, [r2, #8]
 80020c8:	f011 0f0c 	tst.w	r1, #12
 80020cc:	f000 8090 	beq.w	80021f0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d0:	6891      	ldr	r1, [r2, #8]
 80020d2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d6:	2908      	cmp	r1, #8
 80020d8:	f000 8086 	beq.w	80021e8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020dc:	68e3      	ldr	r3, [r4, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 810e 	beq.w	8002300 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b7e      	ldr	r3, [pc, #504]	; (80022e0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4e7d      	ldr	r6, [pc, #500]	; (80022dc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020ec:	f7fe ff70 	bl	8000fd0 <HAL_GetTick>
 80020f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	e005      	b.n	8002100 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7fe ff6c 	bl	8000fd0 <HAL_GetTick>
 80020f8:	1b40      	subs	r0, r0, r5
 80020fa:	2802      	cmp	r0, #2
 80020fc:	f200 80dd 	bhi.w	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	0798      	lsls	r0, r3, #30
 8002104:	d5f6      	bpl.n	80020f4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	6833      	ldr	r3, [r6, #0]
 8002108:	6922      	ldr	r2, [r4, #16]
 800210a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800210e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002112:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	071a      	lsls	r2, r3, #28
 8002118:	d451      	bmi.n	80021be <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	0758      	lsls	r0, r3, #29
 800211c:	d52f      	bpl.n	800217e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211e:	4a6f      	ldr	r2, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 8002120:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002122:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002126:	d07f      	beq.n	8002228 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002128:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4e6e      	ldr	r6, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x298>)
 800212c:	6833      	ldr	r3, [r6, #0]
 800212e:	05d9      	lsls	r1, r3, #23
 8002130:	f140 80b3 	bpl.w	800229a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	68a3      	ldr	r3, [r4, #8]
 8002136:	2b01      	cmp	r3, #1
 8002138:	f000 80c3 	beq.w	80022c2 <HAL_RCC_OscConfig+0x276>
 800213c:	2b05      	cmp	r3, #5
 800213e:	f000 812c 	beq.w	800239a <HAL_RCC_OscConfig+0x34e>
 8002142:	4e66      	ldr	r6, [pc, #408]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 8002144:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	6732      	str	r2, [r6, #112]	; 0x70
 800214c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800214e:	f022 0204 	bic.w	r2, r2, #4
 8002152:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 80b9 	bne.w	80022cc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7fe ff39 	bl	8000fd0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002162:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	e005      	b.n	8002172 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe ff33 	bl	8000fd0 <HAL_GetTick>
 800216a:	1bc0      	subs	r0, r0, r7
 800216c:	4540      	cmp	r0, r8
 800216e:	f200 80a4 	bhi.w	80022ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002172:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002174:	0798      	lsls	r0, r3, #30
 8002176:	d4f6      	bmi.n	8002166 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002178:	2d00      	cmp	r5, #0
 800217a:	f040 8106 	bne.w	800238a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217e:	69a0      	ldr	r0, [r4, #24]
 8002180:	b1c8      	cbz	r0, 80021b6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002182:	4d56      	ldr	r5, [pc, #344]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 8002184:	68ab      	ldr	r3, [r5, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	f000 80c9 	beq.w	8002322 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <HAL_RCC_OscConfig+0x294>)
 8002192:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002194:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002196:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	f000 8109 	beq.w	80023ae <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe ff18 	bl	8000fd0 <HAL_GetTick>
 80021a0:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e005      	b.n	80021b0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ff14 	bl	8000fd0 <HAL_GetTick>
 80021a8:	1b00      	subs	r0, r0, r4
 80021aa:	2802      	cmp	r0, #2
 80021ac:	f200 8085 	bhi.w	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	019b      	lsls	r3, r3, #6
 80021b4:	d4f6      	bmi.n	80021a4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
}
 80021b8:	b002      	add	sp, #8
 80021ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	6963      	ldr	r3, [r4, #20]
 80021c0:	b30b      	cbz	r3, 8002206 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c4:	4e45      	ldr	r6, [pc, #276]	; (80022dc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80021c6:	2201      	movs	r2, #1
 80021c8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80021cc:	f7fe ff00 	bl	8000fd0 <HAL_GetTick>
 80021d0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e004      	b.n	80021de <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe fefc 	bl	8000fd0 <HAL_GetTick>
 80021d8:	1b40      	subs	r0, r0, r5
 80021da:	2802      	cmp	r0, #2
 80021dc:	d86d      	bhi.n	80022ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021e0:	079b      	lsls	r3, r3, #30
 80021e2:	d5f7      	bpl.n	80021d4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	e798      	b.n	800211a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e8:	6852      	ldr	r2, [r2, #4]
 80021ea:	0256      	lsls	r6, r2, #9
 80021ec:	f53f af76 	bmi.w	80020dc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f0:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	0795      	lsls	r5, r2, #30
 80021f6:	d544      	bpl.n	8002282 <HAL_RCC_OscConfig+0x236>
 80021f8:	68e2      	ldr	r2, [r4, #12]
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d041      	beq.n	8002282 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
}
 8002200:	b002      	add	sp, #8
 8002202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002206:	4a36      	ldr	r2, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4e34      	ldr	r6, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800220a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800220e:	f7fe fedf 	bl	8000fd0 <HAL_GetTick>
 8002212:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e004      	b.n	8002220 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe fedb 	bl	8000fd0 <HAL_GetTick>
 800221a:	1b40      	subs	r0, r0, r5
 800221c:	2802      	cmp	r0, #2
 800221e:	d84c      	bhi.n	80022ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002222:	079f      	lsls	r7, r3, #30
 8002224:	d4f7      	bmi.n	8002216 <HAL_RCC_OscConfig+0x1ca>
 8002226:	e7dd      	b.n	80021e4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800223c:	2501      	movs	r5, #1
 800223e:	e774      	b.n	800212a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002240:	684a      	ldr	r2, [r1, #4]
 8002242:	0250      	lsls	r0, r2, #9
 8002244:	f57f af19 	bpl.w	800207a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4a24      	ldr	r2, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	0391      	lsls	r1, r2, #14
 800224e:	f57f af37 	bpl.w	80020c0 <HAL_RCC_OscConfig+0x74>
 8002252:	6862      	ldr	r2, [r4, #4]
 8002254:	2a00      	cmp	r2, #0
 8002256:	f47f af33 	bne.w	80020c0 <HAL_RCC_OscConfig+0x74>
 800225a:	e7d0      	b.n	80021fe <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 800225e:	6813      	ldr	r3, [r2, #0]
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002266:	f7fe feb3 	bl	8000fd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4e1c      	ldr	r6, [pc, #112]	; (80022dc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800226c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e004      	b.n	800227a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe feae 	bl	8000fd0 <HAL_GetTick>
 8002274:	1b40      	subs	r0, r0, r5
 8002276:	2864      	cmp	r0, #100	; 0x64
 8002278:	d81f      	bhi.n	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	6833      	ldr	r3, [r6, #0]
 800227c:	039a      	lsls	r2, r3, #14
 800227e:	d5f7      	bpl.n	8002270 <HAL_RCC_OscConfig+0x224>
 8002280:	e71d      	b.n	80020be <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4916      	ldr	r1, [pc, #88]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 8002284:	6920      	ldr	r0, [r4, #16]
 8002286:	680a      	ldr	r2, [r1, #0]
 8002288:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800228c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002290:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	071a      	lsls	r2, r3, #28
 8002294:	f57f af41 	bpl.w	800211a <HAL_RCC_OscConfig+0xce>
 8002298:	e791      	b.n	80021be <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	6833      	ldr	r3, [r6, #0]
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80022a2:	f7fe fe95 	bl	8000fd0 <HAL_GetTick>
 80022a6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	6833      	ldr	r3, [r6, #0]
 80022aa:	05da      	lsls	r2, r3, #23
 80022ac:	f53f af42 	bmi.w	8002134 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7fe fe8e 	bl	8000fd0 <HAL_GetTick>
 80022b4:	1bc0      	subs	r0, r0, r7
 80022b6:	2802      	cmp	r0, #2
 80022b8:	d9f6      	bls.n	80022a8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80022ba:	2003      	movs	r0, #3
}
 80022bc:	b002      	add	sp, #8
 80022be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x290>)
 80022c4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80022cc:	f7fe fe80 	bl	8000fd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4f02      	ldr	r7, [pc, #8]	; (80022dc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80022d2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0x2a6>
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	42470000 	.word	0x42470000
 80022e4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7fe fe72 	bl	8000fd0 <HAL_GetTick>
 80022ec:	1b80      	subs	r0, r0, r6
 80022ee:	4540      	cmp	r0, r8
 80022f0:	d8e3      	bhi.n	80022ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f4:	079b      	lsls	r3, r3, #30
 80022f6:	d5f7      	bpl.n	80022e8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	f43f af40 	beq.w	800217e <HAL_RCC_OscConfig+0x132>
 80022fe:	e044      	b.n	800238a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002300:	4a42      	ldr	r2, [pc, #264]	; (800240c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4e43      	ldr	r6, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002304:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002306:	f7fe fe63 	bl	8000fd0 <HAL_GetTick>
 800230a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230c:	e004      	b.n	8002318 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fe5f 	bl	8000fd0 <HAL_GetTick>
 8002312:	1b40      	subs	r0, r0, r5
 8002314:	2802      	cmp	r0, #2
 8002316:	d8d0      	bhi.n	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002318:	6833      	ldr	r3, [r6, #0]
 800231a:	0799      	lsls	r1, r3, #30
 800231c:	d4f7      	bmi.n	800230e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	e6f9      	b.n	8002116 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	2801      	cmp	r0, #1
 8002324:	f43f af48 	beq.w	80021b8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002328:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	4291      	cmp	r1, r2
 8002332:	f47f af64 	bne.w	80021fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233c:	4291      	cmp	r1, r2
 800233e:	f47f af5e 	bne.w	80021fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002344:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002348:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800234e:	f47f af56 	bne.w	80021fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002352:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002354:	0852      	lsrs	r2, r2, #1
 8002356:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800235a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002360:	f47f af4d 	bne.w	80021fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002364:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002366:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 800236e:	bf14      	ite	ne
 8002370:	2001      	movne	r0, #1
 8002372:	2000      	moveq	r0, #0
 8002374:	e720      	b.n	80021b8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x3c4>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002386:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002388:	e76d      	b.n	8002266 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x3c4>)
 800238c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
 8002394:	e6f3      	b.n	800217e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002396:	2001      	movs	r0, #1
}
 8002398:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x3c4>)
 800239c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800239e:	f042 0204 	orr.w	r2, r2, #4
 80023a2:	671a      	str	r2, [r3, #112]	; 0x70
 80023a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ac:	e78e      	b.n	80022cc <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80023ae:	f7fe fe0f 	bl	8000fd0 <HAL_GetTick>
 80023b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b4:	e005      	b.n	80023c2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fe0b 	bl	8000fd0 <HAL_GetTick>
 80023ba:	1b80      	subs	r0, r0, r6
 80023bc:	2802      	cmp	r0, #2
 80023be:	f63f af7c 	bhi.w	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	0199      	lsls	r1, r3, #6
 80023c6:	d4f6      	bmi.n	80023b6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80023cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023ce:	430b      	orrs	r3, r1
 80023d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023d4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80023d8:	0852      	lsrs	r2, r2, #1
 80023da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023de:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80023e0:	490a      	ldr	r1, [pc, #40]	; (800240c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80023e6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80023ea:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023ec:	f7fe fdf0 	bl	8000fd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f0:	4d07      	ldr	r5, [pc, #28]	; (8002410 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80023f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f4:	e005      	b.n	8002402 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f6:	f7fe fdeb 	bl	8000fd0 <HAL_GetTick>
 80023fa:	1b00      	subs	r0, r0, r4
 80023fc:	2802      	cmp	r0, #2
 80023fe:	f63f af5c 	bhi.w	80022ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	019a      	lsls	r2, r3, #6
 8002406:	d5f6      	bpl.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
 8002408:	e6d5      	b.n	80021b6 <HAL_RCC_OscConfig+0x16a>
 800240a:	bf00      	nop
 800240c:	42470000 	.word	0x42470000
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002416:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002418:	688b      	ldr	r3, [r1, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d01b      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x46>
 8002422:	2b08      	cmp	r3, #8
 8002424:	d117      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002426:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002428:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002430:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002434:	d113      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <HAL_RCC_GetSysClockFreq+0x60>)
 8002438:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800243c:	fba1 0100 	umull	r0, r1, r1, r0
 8002440:	f7fd fec2 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002450:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002454:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002456:	4807      	ldr	r0, [pc, #28]	; (8002474 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002458:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800245a:	4807      	ldr	r0, [pc, #28]	; (8002478 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800245c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <HAL_RCC_GetSysClockFreq+0x64>)
 8002460:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002464:	2300      	movs	r3, #0
 8002466:	fba1 0100 	umull	r0, r1, r1, r0
 800246a:	f7fd fead 	bl	80001c8 <__aeabi_uldivmod>
 800246e:	e7e9      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x30>
 8002470:	40023800 	.word	0x40023800
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200

0800247c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800247c:	2800      	cmp	r0, #0
 800247e:	f000 8087 	beq.w	8002590 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002482:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_RCC_ClockConfig+0x128>)
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	428b      	cmp	r3, r1
{
 800248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002490:	460d      	mov	r5, r1
 8002492:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	d209      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	b2cb      	uxtb	r3, r1
 8002498:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d002      	beq.n	80024aa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
}
 80024a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	0798      	lsls	r0, r3, #30
 80024ae:	d514      	bpl.n	80024da <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	0759      	lsls	r1, r3, #29
 80024b2:	d504      	bpl.n	80024be <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	493c      	ldr	r1, [pc, #240]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 80024b6:	688a      	ldr	r2, [r1, #8]
 80024b8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80024bc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	071a      	lsls	r2, r3, #28
 80024c0:	d504      	bpl.n	80024cc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c2:	4939      	ldr	r1, [pc, #228]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 80024c4:	688a      	ldr	r2, [r1, #8]
 80024c6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80024ca:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4936      	ldr	r1, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 80024ce:	68a0      	ldr	r0, [r4, #8]
 80024d0:	688a      	ldr	r2, [r1, #8]
 80024d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024d6:	4302      	orrs	r2, r0
 80024d8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	07df      	lsls	r7, r3, #31
 80024dc:	d521      	bpl.n	8002522 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	6862      	ldr	r2, [r4, #4]
 80024e0:	2a01      	cmp	r2, #1
 80024e2:	d057      	beq.n	8002594 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e4:	1e93      	subs	r3, r2, #2
 80024e6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e8:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ec:	d94d      	bls.n	800258a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	0799      	lsls	r1, r3, #30
 80024f0:	d5d8      	bpl.n	80024a4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4e2d      	ldr	r6, [pc, #180]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 80024f4:	68b3      	ldr	r3, [r6, #8]
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80024fe:	f7fe fd67 	bl	8000fd0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002502:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002506:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002508:	e004      	b.n	8002514 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7fe fd61 	bl	8000fd0 <HAL_GetTick>
 800250e:	1bc0      	subs	r0, r0, r7
 8002510:	4540      	cmp	r0, r8
 8002512:	d844      	bhi.n	800259e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002514:	68b3      	ldr	r3, [r6, #8]
 8002516:	6862      	ldr	r2, [r4, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002520:	d1f3      	bne.n	800250a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002522:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x128>)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	42ab      	cmp	r3, r5
 800252c:	d906      	bls.n	800253c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	b2eb      	uxtb	r3, r5
 8002530:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	42ab      	cmp	r3, r5
 800253a:	d1b3      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	075a      	lsls	r2, r3, #29
 8002540:	d506      	bpl.n	8002550 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002542:	4919      	ldr	r1, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 8002544:	68e0      	ldr	r0, [r4, #12]
 8002546:	688a      	ldr	r2, [r1, #8]
 8002548:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800254c:	4302      	orrs	r2, r0
 800254e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	071b      	lsls	r3, r3, #28
 8002552:	d507      	bpl.n	8002564 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 8002556:	6921      	ldr	r1, [r4, #16]
 8002558:	6893      	ldr	r3, [r2, #8]
 800255a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800255e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002562:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002564:	f7ff ff56 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8002568:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 800256a:	4c10      	ldr	r4, [pc, #64]	; (80025ac <HAL_RCC_ClockConfig+0x130>)
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	4910      	ldr	r1, [pc, #64]	; (80025b0 <HAL_RCC_ClockConfig+0x134>)
 8002570:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002574:	4603      	mov	r3, r0
 8002576:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800257c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002580:	f7fe fcdc 	bl	8000f3c <HAL_InitTick>
  return HAL_OK;
 8002584:	2000      	movs	r0, #0
}
 8002586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	0198      	lsls	r0, r3, #6
 800258c:	d4b1      	bmi.n	80024f2 <HAL_RCC_ClockConfig+0x76>
 800258e:	e789      	b.n	80024a4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002590:	2001      	movs	r0, #1
}
 8002592:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <HAL_RCC_ClockConfig+0x12c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	039e      	lsls	r6, r3, #14
 800259a:	d4aa      	bmi.n	80024f2 <HAL_RCC_ClockConfig+0x76>
 800259c:	e782      	b.n	80024a4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800259e:	2003      	movs	r0, #3
 80025a0:	e781      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2a>
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08003430 	.word	0x08003430
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000008 	.word	0x20000008

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80025ba:	4905      	ldr	r1, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025c0:	6808      	ldr	r0, [r1, #0]
 80025c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80025c8:	40d8      	lsrs	r0, r3
 80025ca:	4770      	bx	lr
 80025cc:	40023800 	.word	0x40023800
 80025d0:	20000000 	.word	0x20000000
 80025d4:	08003440 	.word	0x08003440

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80025da:	4905      	ldr	r1, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025e0:	6808      	ldr	r0, [r1, #0]
 80025e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80025e8:	40d8      	lsrs	r0, r3
 80025ea:	4770      	bx	lr
 80025ec:	40023800 	.word	0x40023800
 80025f0:	20000000 	.word	0x20000000
 80025f4:	08003440 	.word	0x08003440

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025fa:	6803      	ldr	r3, [r0, #0]
 80025fc:	f013 0f05 	tst.w	r3, #5
{
 8002600:	b083      	sub	sp, #12
 8002602:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002604:	d105      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002606:	f013 0302 	ands.w	r3, r3, #2
 800260a:	d13b      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800260c:	4618      	mov	r0, r3
}
 800260e:	b003      	add	sp, #12
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002612:	4b46      	ldr	r3, [pc, #280]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x134>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002614:	4e46      	ldr	r6, [pc, #280]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002616:	2200      	movs	r2, #0
 8002618:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800261a:	f7fe fcd9 	bl	8000fd0 <HAL_GetTick>
 800261e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002620:	e004      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x34>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002622:	f7fe fcd5 	bl	8000fd0 <HAL_GetTick>
 8002626:	1b43      	subs	r3, r0, r5
 8002628:	2b02      	cmp	r3, #2
 800262a:	d828      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x86>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800262c:	6833      	ldr	r3, [r6, #0]
 800262e:	011f      	lsls	r7, r3, #4
 8002630:	d4f7      	bmi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002632:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8002636:	071b      	lsls	r3, r3, #28
 8002638:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 800263c:	4a3b      	ldr	r2, [pc, #236]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800263e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002642:	2301      	movs	r3, #1
 8002644:	6693      	str	r3, [r2, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002646:	f7fe fcc3 	bl	8000fd0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800264a:	4e39      	ldr	r6, [pc, #228]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    tickstart = HAL_GetTick();
 800264c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800264e:	e004      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002650:	f7fe fcbe 	bl	8000fd0 <HAL_GetTick>
 8002654:	1b40      	subs	r0, r0, r5
 8002656:	2802      	cmp	r0, #2
 8002658:	d811      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x86>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800265a:	6833      	ldr	r3, [r6, #0]
 800265c:	0118      	lsls	r0, r3, #4
 800265e:	d5f7      	bpl.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x58>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	e7d0      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8002664:	f7fe fcb4 	bl	8000fd0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800266c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002670:	079b      	lsls	r3, r3, #30
 8002672:	d43c      	bmi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fe fcac 	bl	8000fd0 <HAL_GetTick>
 8002678:	1b80      	subs	r0, r0, r6
 800267a:	42b8      	cmp	r0, r7
 800267c:	d9f7      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x76>
        return HAL_TIMEOUT;
 800267e:	2003      	movs	r0, #3
}
 8002680:	b003      	add	sp, #12
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    PWR->CR |= PWR_CR_DBP;
 8002686:	4d2b      	ldr	r5, [pc, #172]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002688:	2200      	movs	r2, #0
 800268a:	9201      	str	r2, [sp, #4]
 800268c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800269e:	682b      	ldr	r3, [r5, #0]
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80026a6:	f7fe fc93 	bl	8000fd0 <HAL_GetTick>
 80026aa:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026ac:	e004      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fc8f 	bl	8000fd0 <HAL_GetTick>
 80026b2:	1b83      	subs	r3, r0, r6
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d8e2      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x86>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	05d9      	lsls	r1, r3, #23
 80026bc:	d5f7      	bpl.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026be:	4d1c      	ldr	r5, [pc, #112]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c0:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c4:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80026c8:	d012      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80026ca:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80026ce:	4291      	cmp	r1, r2
 80026d0:	d010      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	2100      	movs	r1, #0
 80026e2:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80026e6:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026ea:	07da      	lsls	r2, r3, #31
 80026ec:	d4ba      	bmi.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	68e3      	ldr	r3, [r4, #12]
 80026f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80026f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80026f8:	d00d      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80026fa:	490d      	ldr	r1, [pc, #52]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80026fc:	688a      	ldr	r2, [r1, #8]
 80026fe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002702:	608a      	str	r2, [r1, #8]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002706:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
  return HAL_OK;
 800270c:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270e:	430b      	orrs	r3, r1
 8002710:	6713      	str	r3, [r2, #112]	; 0x70
}
 8002712:	b003      	add	sp, #12
 8002714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002718:	6882      	ldr	r2, [r0, #8]
 800271a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800271e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002722:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002726:	430a      	orrs	r2, r1
 8002728:	6082      	str	r2, [r0, #8]
 800272a:	e7eb      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800272c:	42470000 	.word	0x42470000
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000

08002738 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002738:	2801      	cmp	r0, #1
 800273a:	d001      	beq.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 800273c:	2000      	movs	r0, #0
    {
       break;
    }
  }
  return frequency;
}
 800273e:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
 8002742:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002744:	0211      	lsls	r1, r2, #8
 8002746:	d501      	bpl.n	800274c <HAL_RCCEx_GetPeriphCLKFreq+0x14>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002748:	480d      	ldr	r0, [pc, #52]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
 800274a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800274c:	685a      	ldr	r2, [r3, #4]
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800274e:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002750:	0252      	lsls	r2, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002752:	bf4c      	ite	mi
 8002754:	4a0b      	ldrmi	r2, [pc, #44]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002756:	4a0c      	ldrpl	r2, [pc, #48]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800275c:	fbb2 f2f3 	udiv	r2, r2, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
 8002762:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800276a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800276e:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002772:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002776:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800277a:	4770      	bx	lr
 800277c:	40023800 	.word	0x40023800
 8002780:	00bb8000 	.word	0x00bb8000
 8002784:	007a1200 	.word	0x007a1200
 8002788:	00f42400 	.word	0x00f42400

0800278c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800278c:	2800      	cmp	r0, #0
 800278e:	d05c      	beq.n	800284a <HAL_SPI_Init+0xbe>
{
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002794:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002796:	2800      	cmp	r0, #0
 8002798:	d047      	beq.n	800282a <HAL_SPI_Init+0x9e>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800279a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800279c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	2200      	movs	r2, #0
 80027a6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d042      	beq.n	8002836 <HAL_SPI_Init+0xaa>
 80027b0:	4694      	mov	ip, r2
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b2:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027b4:	68a5      	ldr	r5, [r4, #8]
 80027b6:	69a2      	ldr	r2, [r4, #24]
 80027b8:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80027c0:	680b      	ldr	r3, [r1, #0]
 80027c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c8:	6863      	ldr	r3, [r4, #4]
 80027ca:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80027ce:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80027d2:	432b      	orrs	r3, r5
 80027d4:	68e5      	ldr	r5, [r4, #12]
 80027d6:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80027da:	432b      	orrs	r3, r5
 80027dc:	6925      	ldr	r5, [r4, #16]
 80027de:	f005 0502 	and.w	r5, r5, #2
 80027e2:	432b      	orrs	r3, r5
 80027e4:	6965      	ldr	r5, [r4, #20]
 80027e6:	f005 0501 	and.w	r5, r5, #1
 80027ea:	432b      	orrs	r3, r5
 80027ec:	69e5      	ldr	r5, [r4, #28]
 80027ee:	f006 0e80 	and.w	lr, r6, #128	; 0x80
 80027f2:	f402 7600 	and.w	r6, r2, #512	; 0x200
 80027f6:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80027fa:	4333      	orrs	r3, r6
 80027fc:	432b      	orrs	r3, r5
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027fe:	0c12      	lsrs	r2, r2, #16
 8002800:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002804:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002808:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800280c:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002810:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002812:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002814:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002816:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002818:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800281e:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002820:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002822:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002824:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002828:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282a:	6863      	ldr	r3, [r4, #4]
 800282c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002830:	d0b6      	beq.n	80027a0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002832:	61e0      	str	r0, [r4, #28]
 8002834:	e7b4      	b.n	80027a0 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8002836:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002838:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800283c:	f7fe f98e 	bl	8000b5c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002840:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002844:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8002848:	e7b3      	b.n	80027b2 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800284a:	2001      	movs	r0, #1
}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002850:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002852:	6a02      	ldr	r2, [r0, #32]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	6202      	str	r2, [r0, #32]
{
 800285a:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002860:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002862:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002866:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002868:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800286a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800286e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002870:	4d0e      	ldr	r5, [pc, #56]	; (80028ac <TIM_OC1_SetConfig+0x5c>)
 8002872:	42a8      	cmp	r0, r5
 8002874:	d00a      	beq.n	800288c <TIM_OC1_SetConfig+0x3c>
 8002876:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800287a:	42a8      	cmp	r0, r5
 800287c:	d006      	beq.n	800288c <TIM_OC1_SetConfig+0x3c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800287e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002880:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002882:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002884:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8002886:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002888:	6203      	str	r3, [r0, #32]
}
 800288a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800288c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800288e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002892:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002894:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002898:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800289c:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80028a0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80028a4:	ea4c 0404 	orr.w	r4, ip, r4
 80028a8:	e7e9      	b.n	800287e <TIM_OC1_SetConfig+0x2e>
 80028aa:	bf00      	nop
 80028ac:	40010000 	.word	0x40010000

080028b0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028b2:	6a02      	ldr	r2, [r0, #32]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b8:	6202      	str	r2, [r0, #32]
{
 80028ba:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80028c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80028ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028d2:	4d0f      	ldr	r5, [pc, #60]	; (8002910 <TIM_OC3_SetConfig+0x60>)
 80028d4:	42a8      	cmp	r0, r5
 80028d6:	d00a      	beq.n	80028ee <TIM_OC3_SetConfig+0x3e>
 80028d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028dc:	42a8      	cmp	r0, r5
 80028de:	d006      	beq.n	80028ee <TIM_OC3_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028e0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80028e2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80028e4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80028e6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80028e8:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80028ea:	6203      	str	r3, [r0, #32]
}
 80028ec:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028f8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028fc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002900:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002908:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
 800290c:	e7e8      	b.n	80028e0 <TIM_OC3_SetConfig+0x30>
 800290e:	bf00      	nop
 8002910:	40010000 	.word	0x40010000

08002914 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002914:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002916:	6a02      	ldr	r2, [r0, #32]
 8002918:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800291c:	6202      	str	r2, [r0, #32]
{
 800291e:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002922:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002924:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002926:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800292e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002934:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002938:	4d09      	ldr	r5, [pc, #36]	; (8002960 <TIM_OC4_SetConfig+0x4c>)
 800293a:	42a8      	cmp	r0, r5
 800293c:	d00a      	beq.n	8002954 <TIM_OC4_SetConfig+0x40>
 800293e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002942:	42a8      	cmp	r0, r5
 8002944:	d006      	beq.n	8002954 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002946:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002948:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800294a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800294c:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 800294e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002950:	6203      	str	r3, [r0, #32]
}
 8002952:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002954:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002956:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800295a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800295e:	e7f2      	b.n	8002946 <TIM_OC4_SetConfig+0x32>
 8002960:	40010000 	.word	0x40010000

08002964 <HAL_TIM_PeriodElapsedCallback>:
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <HAL_TIM_OC_DelayElapsedCallback>:
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <HAL_TIM_IC_CaptureCallback>:
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop

08002974 <HAL_TIM_TriggerCallback>:
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop

08002978 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002978:	6803      	ldr	r3, [r0, #0]
{
 800297a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800297c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800297e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002980:	07a9      	lsls	r1, r5, #30
{
 8002982:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002984:	d501      	bpl.n	800298a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002986:	07b2      	lsls	r2, r6, #30
 8002988:	d451      	bmi.n	8002a2e <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800298a:	0769      	lsls	r1, r5, #29
 800298c:	d501      	bpl.n	8002992 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800298e:	0772      	lsls	r2, r6, #29
 8002990:	d43a      	bmi.n	8002a08 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002992:	072b      	lsls	r3, r5, #28
 8002994:	d501      	bpl.n	800299a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002996:	0730      	lsls	r0, r6, #28
 8002998:	d424      	bmi.n	80029e4 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800299a:	06ea      	lsls	r2, r5, #27
 800299c:	d501      	bpl.n	80029a2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800299e:	06f3      	lsls	r3, r6, #27
 80029a0:	d410      	bmi.n	80029c4 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a2:	07e8      	lsls	r0, r5, #31
 80029a4:	d501      	bpl.n	80029aa <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029a6:	07f1      	lsls	r1, r6, #31
 80029a8:	d457      	bmi.n	8002a5a <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029aa:	062a      	lsls	r2, r5, #24
 80029ac:	d501      	bpl.n	80029b2 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ae:	0633      	lsls	r3, r6, #24
 80029b0:	d45b      	bmi.n	8002a6a <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029b2:	0668      	lsls	r0, r5, #25
 80029b4:	d501      	bpl.n	80029ba <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029b6:	0671      	lsls	r1, r6, #25
 80029b8:	d45f      	bmi.n	8002a7a <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029ba:	06aa      	lsls	r2, r5, #26
 80029bc:	d501      	bpl.n	80029c2 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029be:	06b3      	lsls	r3, r6, #26
 80029c0:	d442      	bmi.n	8002a48 <HAL_TIM_IRQHandler+0xd0>
}
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f06f 0210 	mvn.w	r2, #16
 80029ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029cc:	2208      	movs	r2, #8
 80029ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d8:	d063      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80029da:	f7ff ffc7 	bl	800296c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	2300      	movs	r3, #0
 80029e0:	7723      	strb	r3, [r4, #28]
 80029e2:	e7de      	b.n	80029a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	f06f 0208 	mvn.w	r2, #8
 80029ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ec:	2204      	movs	r2, #4
 80029ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80029f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f6:	d151      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f8:	f7ff ffb6 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7ff ffb7 	bl	8002970 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	2300      	movs	r3, #0
 8002a04:	7723      	strb	r3, [r4, #28]
 8002a06:	e7c8      	b.n	800299a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	f06f 0204 	mvn.w	r2, #4
 8002a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a10:	2202      	movs	r2, #2
 8002a12:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a1c:	d13b      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	f7ff ffa3 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff ffa4 	bl	8002970 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	7723      	strb	r3, [r4, #28]
 8002a2c:	e7b1      	b.n	8002992 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a2e:	f06f 0202 	mvn.w	r2, #2
 8002a32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a34:	2201      	movs	r2, #1
 8002a36:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	079b      	lsls	r3, r3, #30
 8002a3c:	d025      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	f7ff ff95 	bl	800296c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	2300      	movs	r3, #0
 8002a44:	7723      	strb	r3, [r4, #28]
 8002a46:	e7a0      	b.n	800298a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002a4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a50:	611a      	str	r2, [r3, #16]
}
 8002a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002a56:	f000 b9c9 	b.w	8002dec <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	f06f 0201 	mvn.w	r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a62:	4620      	mov	r0, r4
 8002a64:	f7ff ff7e 	bl	8002964 <HAL_TIM_PeriodElapsedCallback>
 8002a68:	e79f      	b.n	80029aa <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a70:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a72:	4620      	mov	r0, r4
 8002a74:	f000 f9bc 	bl	8002df0 <HAL_TIMEx_BreakCallback>
 8002a78:	e79b      	b.n	80029b2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a80:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff ff76 	bl	8002974 <HAL_TIM_TriggerCallback>
 8002a88:	e797      	b.n	80029ba <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	f7ff ff6d 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff ff6e 	bl	8002970 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a94:	e7d5      	b.n	8002a42 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	f7ff ff69 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002a9a:	e7c5      	b.n	8002a28 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9c:	f7ff ff66 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e7af      	b.n	8002a02 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	f7ff ff61 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff ff62 	bl	8002970 <HAL_TIM_PWM_PulseFinishedCallback>
 8002aac:	e797      	b.n	80029de <HAL_TIM_IRQHandler+0x66>
 8002aae:	bf00      	nop

08002ab0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	4a34      	ldr	r2, [pc, #208]	; (8002b84 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8002ab2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab4:	4290      	cmp	r0, r2
{
 8002ab6:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab8:	d050      	beq.n	8002b5c <TIM_Base_SetConfig+0xac>
 8002aba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002abe:	d03b      	beq.n	8002b38 <TIM_Base_SetConfig+0x88>
 8002ac0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ac4:	4290      	cmp	r0, r2
 8002ac6:	d037      	beq.n	8002b38 <TIM_Base_SetConfig+0x88>
 8002ac8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002acc:	4290      	cmp	r0, r2
 8002ace:	d033      	beq.n	8002b38 <TIM_Base_SetConfig+0x88>
 8002ad0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ad4:	4290      	cmp	r0, r2
 8002ad6:	d02f      	beq.n	8002b38 <TIM_Base_SetConfig+0x88>
 8002ad8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002adc:	4290      	cmp	r0, r2
 8002ade:	d03d      	beq.n	8002b5c <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002ae4:	4290      	cmp	r0, r2
 8002ae6:	d02b      	beq.n	8002b40 <TIM_Base_SetConfig+0x90>
 8002ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aec:	4290      	cmp	r0, r2
 8002aee:	d027      	beq.n	8002b40 <TIM_Base_SetConfig+0x90>
 8002af0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002af4:	4290      	cmp	r0, r2
 8002af6:	d023      	beq.n	8002b40 <TIM_Base_SetConfig+0x90>
 8002af8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002afc:	4290      	cmp	r0, r2
 8002afe:	d01f      	beq.n	8002b40 <TIM_Base_SetConfig+0x90>
 8002b00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b04:	4290      	cmp	r0, r2
 8002b06:	d01b      	beq.n	8002b40 <TIM_Base_SetConfig+0x90>
 8002b08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b0c:	4290      	cmp	r0, r2
 8002b0e:	d017      	beq.n	8002b40 <TIM_Base_SetConfig+0x90>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b10:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b12:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8002b14:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002b1c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b1e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b20:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002b22:	2301      	movs	r3, #1
 8002b24:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b26:	6903      	ldr	r3, [r0, #16]
 8002b28:	07db      	lsls	r3, r3, #31
 8002b2a:	d503      	bpl.n	8002b34 <TIM_Base_SetConfig+0x84>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b2c:	6903      	ldr	r3, [r0, #16]
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	6103      	str	r3, [r0, #16]
}
 8002b34:	bc30      	pop	{r4, r5}
 8002b36:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002b38:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b3e:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b40:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b42:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b48:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002b52:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002b54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b56:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b58:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5a:	e7e2      	b.n	8002b22 <TIM_Base_SetConfig+0x72>
    tmpcr1 |= Structure->CounterMode;
 8002b5c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b64:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	694a      	ldr	r2, [r1, #20]
 8002b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b72:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002b74:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b76:	688b      	ldr	r3, [r1, #8]
 8002b78:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b7a:	680b      	ldr	r3, [r1, #0]
 8002b7c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7e:	690b      	ldr	r3, [r1, #16]
 8002b80:	6303      	str	r3, [r0, #48]	; 0x30
 8002b82:	e7ce      	b.n	8002b22 <TIM_Base_SetConfig+0x72>
 8002b84:	40010000 	.word	0x40010000

08002b88 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002b88:	b350      	cbz	r0, 8002be0 <HAL_TIM_Base_Init+0x58>
{
 8002b8a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b90:	4604      	mov	r4, r0
 8002b92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b96:	b1f3      	cbz	r3, 8002bd6 <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b98:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ba4:	f7ff ff84 	bl	8002ab0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002bb2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002bb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002bba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002bd2:	2000      	movs	r0, #0
}
 8002bd4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002bda:	f7fe f871 	bl	8000cc0 <HAL_TIM_Base_MspInit>
 8002bde:	e7db      	b.n	8002b98 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002be0:	2001      	movs	r0, #1
}
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002be4:	b350      	cbz	r0, 8002c3c <HAL_TIM_PWM_Init+0x58>
{
 8002be6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002be8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bec:	4604      	mov	r4, r0
 8002bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bf2:	b1f3      	cbz	r3, 8002c32 <HAL_TIM_PWM_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002c00:	f7ff ff56 	bl	8002ab0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002c0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002c12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002c16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c2e:	2000      	movs	r0, #0
}
 8002c30:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002c36:	f7fe f82b 	bl	8000c90 <HAL_TIM_PWM_MspInit>
 8002c3a:	e7db      	b.n	8002bf4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
}
 8002c3e:	4770      	bx	lr

08002c40 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8002c40:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c42:	6a02      	ldr	r2, [r0, #32]
 8002c44:	f022 0210 	bic.w	r2, r2, #16
 8002c48:	6202      	str	r2, [r0, #32]
{
 8002c4a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8002c4c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002c4e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c52:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002c5c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c64:	4d0e      	ldr	r5, [pc, #56]	; (8002ca0 <TIM_OC2_SetConfig+0x60>)
 8002c66:	42a8      	cmp	r0, r5
 8002c68:	d00a      	beq.n	8002c80 <TIM_OC2_SetConfig+0x40>
 8002c6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c6e:	42a8      	cmp	r0, r5
 8002c70:	d006      	beq.n	8002c80 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8002c72:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002c74:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002c76:	6182      	str	r2, [r0, #24]
}
 8002c78:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8002c7a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002c7c:	6203      	str	r3, [r0, #32]
}
 8002c7e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c80:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c86:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c8e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c92:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c9a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8002c9e:	e7e8      	b.n	8002c72 <TIM_OC2_SetConfig+0x32>
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002ca4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002ca6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d05b      	beq.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002cb8:	2a0c      	cmp	r2, #12
 8002cba:	d808      	bhi.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002cbc:	e8df f002 	tbb	[pc, r2]
 8002cc0:	0707071f 	.word	0x0707071f
 8002cc4:	07070730 	.word	0x07070730
 8002cc8:	07070742 	.word	0x07070742
 8002ccc:	0d          	.byte	0x0d
 8002ccd:	00          	.byte	0x00
 8002cce:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	f7ff fe1a 	bl	8002914 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ce8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cea:	69c2      	ldr	r2, [r0, #28]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf2:	69c2      	ldr	r2, [r0, #28]
 8002cf4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cfa:	61c2      	str	r2, [r0, #28]
      break;
 8002cfc:	e7e8      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cfe:	6800      	ldr	r0, [r0, #0]
 8002d00:	f7ff fda6 	bl	8002850 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d04:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d06:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d0e:	6982      	ldr	r2, [r0, #24]
 8002d10:	f022 0204 	bic.w	r2, r2, #4
 8002d14:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d16:	6982      	ldr	r2, [r0, #24]
 8002d18:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d1c:	6182      	str	r2, [r0, #24]
      break;
 8002d1e:	e7d7      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d20:	6800      	ldr	r0, [r0, #0]
 8002d22:	f7ff ff8d 	bl	8002c40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d26:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d28:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d2e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d30:	6982      	ldr	r2, [r0, #24]
 8002d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d36:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d38:	6982      	ldr	r2, [r0, #24]
 8002d3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d40:	6182      	str	r2, [r0, #24]
      break;
 8002d42:	e7c5      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d44:	6800      	ldr	r0, [r0, #0]
 8002d46:	f7ff fdb3 	bl	80028b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d4a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d4c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d4e:	f043 0308 	orr.w	r3, r3, #8
 8002d52:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d54:	69c2      	ldr	r2, [r0, #28]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5c:	69c2      	ldr	r2, [r0, #28]
 8002d5e:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d62:	61c2      	str	r2, [r0, #28]
      break;
 8002d64:	e7b4      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8002d66:	2302      	movs	r3, #2
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}

08002d6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d037      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d76:	2202      	movs	r2, #2
{
 8002d78:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002d7e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d80:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002d82:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d88:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01a      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d017      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002d98:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00f      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002db0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002db8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002dc0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc8:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dca:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dce:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002dd2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002dda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002dde:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8002de0:	4618      	mov	r0, r3
}
 8002de2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002de4:	2002      	movs	r0, #2
}
 8002de6:	4770      	bx	lr
 8002de8:	40010000 	.word	0x40010000

08002dec <HAL_TIMEx_CommutCallback>:
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop

08002df0 <HAL_TIMEx_BreakCallback>:
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop

08002df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002df4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	f102 030c 	add.w	r3, r2, #12
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	f102 0c0c 	add.w	ip, r2, #12
 8002e06:	e84c 3100 	strex	r1, r3, [ip]
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d1f3      	bne.n	8002df6 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	f102 0314 	add.w	r3, r2, #20
 8002e12:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	f102 0c14 	add.w	ip, r2, #20
 8002e1e:	e84c 3100 	strex	r1, r3, [ip]
 8002e22:	2900      	cmp	r1, #0
 8002e24:	d1f3      	bne.n	8002e0e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d005      	beq.n	8002e38 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002e36:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	f102 030c 	add.w	r3, r2, #12
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	f102 0c0c 	add.w	ip, r2, #12
 8002e48:	e84c 3100 	strex	r1, r3, [ip]
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d1f3      	bne.n	8002e38 <UART_EndRxTransfer+0x44>
 8002e50:	e7ec      	b.n	8002e2c <UART_EndRxTransfer+0x38>
 8002e52:	bf00      	nop

08002e54 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	6802      	ldr	r2, [r0, #0]
 8002e56:	6911      	ldr	r1, [r2, #16]
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e5e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e60:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002e64:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e66:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e68:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e6a:	4303      	orrs	r3, r0
 8002e6c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002e6e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e70:	4303      	orrs	r3, r0
 8002e72:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002e78:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e7c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e82:	6953      	ldr	r3, [r2, #20]
 8002e84:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e86:	4927      	ldr	r1, [pc, #156]	; (8002f24 <UART_SetConfig+0xd0>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e8e:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e92:	d028      	beq.n	8002ee6 <UART_SetConfig+0x92>
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <UART_SetConfig+0xd4>)
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d025      	beq.n	8002ee6 <UART_SetConfig+0x92>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e9a:	f7ff fb8d 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9e:	69e3      	ldr	r3, [r4, #28]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea4:	d125      	bne.n	8002ef2 <UART_SetConfig+0x9e>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea6:	6862      	ldr	r2, [r4, #4]
 8002ea8:	2119      	movs	r1, #25
 8002eaa:	1892      	adds	r2, r2, r2
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	fba0 0101 	umull	r0, r1, r0, r1
 8002eb6:	f7fd f987 	bl	80001c8 <__aeabi_uldivmod>
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <UART_SetConfig+0xd8>)
 8002ebc:	6824      	ldr	r4, [r4, #0]
 8002ebe:	fba2 3100 	umull	r3, r1, r2, r0
 8002ec2:	0949      	lsrs	r1, r1, #5
 8002ec4:	2364      	movs	r3, #100	; 0x64
 8002ec6:	fb03 0311 	mls	r3, r3, r1, r0
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ee4:	bd10      	pop	{r4, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee6:	f7ff fb77 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eea:	69e3      	ldr	r3, [r4, #28]
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef0:	d0d9      	beq.n	8002ea6 <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef2:	6863      	ldr	r3, [r4, #4]
 8002ef4:	2119      	movs	r1, #25
 8002ef6:	009a      	lsls	r2, r3, #2
 8002ef8:	fba0 0101 	umull	r0, r1, r0, r1
 8002efc:	0f9b      	lsrs	r3, r3, #30
 8002efe:	f7fd f963 	bl	80001c8 <__aeabi_uldivmod>
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <UART_SetConfig+0xd8>)
 8002f04:	fba2 1300 	umull	r1, r3, r2, r0
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	6821      	ldr	r1, [r4, #0]
 8002f0c:	2464      	movs	r4, #100	; 0x64
 8002f0e:	fb04 0013 	mls	r0, r4, r3, r0
 8002f12:	0100      	lsls	r0, r0, #4
 8002f14:	3032      	adds	r0, #50	; 0x32
 8002f16:	fba2 2000 	umull	r2, r0, r2, r0
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8002f20:	608b      	str	r3, [r1, #8]
}
 8002f22:	bd10      	pop	{r4, pc}
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	51eb851f 	.word	0x51eb851f

08002f30 <HAL_UART_Init>:
  if (huart == NULL)
 8002f30:	b370      	cbz	r0, 8002f90 <HAL_UART_Init+0x60>
{
 8002f32:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f38:	4604      	mov	r4, r0
 8002f3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f3e:	b313      	cbz	r3, 8002f86 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8002f40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f42:	2324      	movs	r3, #36	; 0x24
 8002f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002f48:	68d3      	ldr	r3, [r2, #12]
 8002f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  UART_SetConfig(huart);
 8002f4e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002f50:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002f52:	f7ff ff7f 	bl	8002e54 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8002f5e:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f60:	6959      	ldr	r1, [r3, #20]
 8002f62:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8002f66:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002f68:	68d9      	ldr	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8002f6c:	f04f 0c20 	mov.w	ip, #32
  __HAL_UART_ENABLE(huart);
 8002f70:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002f74:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	6462      	str	r2, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f78:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  return HAL_OK;
 8002f80:	4610      	mov	r0, r2
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f82:	6362      	str	r2, [r4, #52]	; 0x34
}
 8002f84:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002f86:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002f8a:	f7fd ff6f 	bl	8000e6c <HAL_UART_MspInit>
 8002f8e:	e7d7      	b.n	8002f40 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8002f90:	2001      	movs	r0, #1
}
 8002f92:	4770      	bx	lr

08002f94 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002f94:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d115      	bne.n	8002fc8 <HAL_UART_Transmit_IT+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002f9c:	b101      	cbz	r1, 8002fa0 <HAL_UART_Transmit_IT+0xc>
 8002f9e:	b90a      	cbnz	r2, 8002fa4 <HAL_UART_Transmit_IT+0x10>
      return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
}
 8002fa2:	4770      	bx	lr
{
 8002fa4:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fa8:	6804      	ldr	r4, [r0, #0]
    huart->pTxBuffPtr = pData;
 8002faa:	6201      	str	r1, [r0, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fac:	2121      	movs	r1, #33	; 0x21
    huart->TxXferCount = Size;
 8002fae:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb2:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fb6:	68e1      	ldr	r1, [r4, #12]
    huart->TxXferSize = Size;
 8002fb8:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fba:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002fbe:	60e1      	str	r1, [r4, #12]
    return HAL_OK;
 8002fc0:	4618      	mov	r0, r3
}
 8002fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc6:	4770      	bx	lr
    return HAL_BUSY;
 8002fc8:	2002      	movs	r0, #2
 8002fca:	4770      	bx	lr

08002fcc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fcc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d103      	bne.n	8002fdc <HAL_UART_Receive_IT+0x10>
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	b101      	cbz	r1, 8002fd8 <HAL_UART_Receive_IT+0xc>
 8002fd6:	b91a      	cbnz	r2, 8002fe0 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8002fd8:	2001      	movs	r0, #1
}
 8002fda:	4770      	bx	lr
    return HAL_BUSY;
 8002fdc:	2002      	movs	r0, #2
 8002fde:	4770      	bx	lr
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxXferCount = Size;
 8002fe4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	6443      	str	r3, [r0, #68]	; 0x44
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fe8:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8002fea:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fec:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 8002fee:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff0:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ff4:	b953      	cbnz	r3, 800300c <HAL_UART_Receive_IT+0x40>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff6:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003006:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003008:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 800300a:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800300c:	6803      	ldr	r3, [r0, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	e7ef      	b.n	8002ff8 <HAL_UART_Receive_IT+0x2c>

08003018 <HAL_UART_ErrorCallback>:
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop

0800301c <UART_DMAAbortOnError>:
{
 800301c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003020:	2300      	movs	r3, #0
 8003022:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003024:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003026:	f7ff fff7 	bl	8003018 <HAL_UART_ErrorCallback>
}
 800302a:	bd08      	pop	{r3, pc}

0800302c <HAL_UARTEx_RxEventCallback>:
}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003030:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003034:	2b22      	cmp	r3, #34	; 0x22
 8003036:	d151      	bne.n	80030dc <UART_Receive_IT.isra.0+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	6883      	ldr	r3, [r0, #8]
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d043      	beq.n	80030c8 <UART_Receive_IT.isra.0+0x98>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003040:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04b      	beq.n	80030de <UART_Receive_IT.isra.0+0xae>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003050:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003052:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8003054:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 8003056:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003058:	3b01      	subs	r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800305e:	2b00      	cmp	r3, #0
 8003060:	d13c      	bne.n	80030dc <UART_Receive_IT.isra.0+0xac>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003062:	6802      	ldr	r2, [r0, #0]
 8003064:	68d1      	ldr	r1, [r2, #12]
 8003066:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800306a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800306c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800306e:	68d1      	ldr	r1, [r2, #12]
 8003070:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003074:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003076:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003078:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800307c:	f021 0101 	bic.w	r1, r1, #1
 8003080:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003082:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003086:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003088:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800308a:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800308c:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308e:	d12d      	bne.n	80030ec <UART_Receive_IT.isra.0+0xbc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003090:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	f102 030c 	add.w	r3, r2, #12
 8003096:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	f102 0c0c 	add.w	ip, r2, #12
 80030a2:	e84c 3100 	strex	r1, r3, [ip]
 80030a6:	2900      	cmp	r1, #0
 80030a8:	d1f3      	bne.n	8003092 <UART_Receive_IT.isra.0+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	06db      	lsls	r3, r3, #27
 80030ae:	d505      	bpl.n	80030bc <UART_Receive_IT.isra.0+0x8c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030b0:	9101      	str	r1, [sp, #4]
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	6853      	ldr	r3, [r2, #4]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030bc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80030be:	f7ff ffb5 	bl	800302c <HAL_UARTEx_RxEventCallback>
}
 80030c2:	b003      	add	sp, #12
 80030c4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	6903      	ldr	r3, [r0, #16]
 80030ca:	b9a3      	cbnz	r3, 80030f6 <UART_Receive_IT.isra.0+0xc6>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80030da:	e7bb      	b.n	8003054 <UART_Receive_IT.isra.0+0x24>
 80030dc:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030de:	6903      	ldr	r3, [r0, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1b0      	bne.n	8003046 <UART_Receive_IT.isra.0+0x16>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030e4:	6803      	ldr	r3, [r0, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	7013      	strb	r3, [r2, #0]
 80030ea:	e7b1      	b.n	8003050 <UART_Receive_IT.isra.0+0x20>
        HAL_UART_RxCpltCallback(huart);
 80030ec:	f7fd fcf2 	bl	8000ad4 <HAL_UART_RxCpltCallback>
}
 80030f0:	b003      	add	sp, #12
 80030f2:	f85d fb04 	ldr.w	pc, [sp], #4
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030f8:	e7f4      	b.n	80030e4 <UART_Receive_IT.isra.0+0xb4>
 80030fa:	bf00      	nop

080030fc <HAL_UART_IRQHandler>:
{
 80030fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030fe:	6805      	ldr	r5, [r0, #0]
 8003100:	682b      	ldr	r3, [r5, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003102:	68ea      	ldr	r2, [r5, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003104:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 8003106:	071e      	lsls	r6, r3, #28
{
 8003108:	b082      	sub	sp, #8
 800310a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800310c:	46ac      	mov	ip, r5
  if (errorflags == RESET)
 800310e:	d173      	bne.n	80031f8 <HAL_UART_IRQHandler+0xfc>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003110:	069d      	lsls	r5, r3, #26
 8003112:	d502      	bpl.n	800311a <HAL_UART_IRQHandler+0x1e>
 8003114:	0691      	lsls	r1, r2, #26
 8003116:	f100 80e1 	bmi.w	80032dc <HAL_UART_IRQHandler+0x1e0>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800311c:	2901      	cmp	r1, #1
 800311e:	d00b      	beq.n	8003138 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003120:	061d      	lsls	r5, r3, #24
 8003122:	d502      	bpl.n	800312a <HAL_UART_IRQHandler+0x2e>
 8003124:	0610      	lsls	r0, r2, #24
 8003126:	f100 80a8 	bmi.w	800327a <HAL_UART_IRQHandler+0x17e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800312a:	0659      	lsls	r1, r3, #25
 800312c:	d502      	bpl.n	8003134 <HAL_UART_IRQHandler+0x38>
 800312e:	0653      	lsls	r3, r2, #25
 8003130:	f100 80c7 	bmi.w	80032c2 <HAL_UART_IRQHandler+0x1c6>
}
 8003134:	b002      	add	sp, #8
 8003136:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003138:	06d8      	lsls	r0, r3, #27
 800313a:	d5f1      	bpl.n	8003120 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800313c:	06d1      	lsls	r1, r2, #27
 800313e:	d5ef      	bpl.n	8003120 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003140:	2300      	movs	r3, #0
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	f8dc 3000 	ldr.w	r3, [ip]
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003152:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8003156:	065e      	lsls	r6, r3, #25
 8003158:	f140 80eb 	bpl.w	8003332 <HAL_UART_IRQHandler+0x236>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800315c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800315e:	6803      	ldr	r3, [r0, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0e5      	beq.n	8003134 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003168:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800316a:	429a      	cmp	r2, r3
 800316c:	d9e2      	bls.n	8003134 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800316e:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003170:	69c3      	ldr	r3, [r0, #28]
 8003172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003176:	d036      	beq.n	80031e6 <HAL_UART_IRQHandler+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	f10c 030c 	add.w	r3, ip, #12
 800317c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	f10c 010c 	add.w	r1, ip, #12
 8003188:	e841 3200 	strex	r2, r3, [r1]
 800318c:	2a00      	cmp	r2, #0
 800318e:	d1f3      	bne.n	8003178 <HAL_UART_IRQHandler+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	f10c 0314 	add.w	r3, ip, #20
 8003194:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	f10c 0114 	add.w	r1, ip, #20
 80031a0:	e841 3200 	strex	r2, r3, [r1]
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d1f3      	bne.n	8003190 <HAL_UART_IRQHandler+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	f10c 0314 	add.w	r3, ip, #20
 80031ac:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	f10c 0114 	add.w	r1, ip, #20
 80031b8:	e841 3200 	strex	r2, r3, [r1]
 80031bc:	2a00      	cmp	r2, #0
 80031be:	d1f3      	bne.n	80031a8 <HAL_UART_IRQHandler+0xac>
          huart->RxState = HAL_UART_STATE_READY;
 80031c0:	2320      	movs	r3, #32
 80031c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c6:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	f10c 030c 	add.w	r3, ip, #12
 80031cc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	f10c 010c 	add.w	r1, ip, #12
 80031d8:	e841 3200 	strex	r2, r3, [r1]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d1f3      	bne.n	80031c8 <HAL_UART_IRQHandler+0xcc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031e0:	f7fe f9b8 	bl	8001554 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031e6:	2302      	movs	r3, #2
 80031e8:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80031ec:	1ad2      	subs	r2, r2, r3
 80031ee:	4620      	mov	r0, r4
 80031f0:	b291      	uxth	r1, r2
 80031f2:	f7ff ff1b 	bl	800302c <HAL_UARTEx_RxEventCallback>
 80031f6:	e79d      	b.n	8003134 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031f8:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031fc:	f402 7090 	and.w	r0, r2, #288	; 0x120
 8003200:	4308      	orrs	r0, r1
 8003202:	d08a      	beq.n	800311a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003204:	07de      	lsls	r6, r3, #31
 8003206:	d505      	bpl.n	8003214 <HAL_UART_IRQHandler+0x118>
 8003208:	05d0      	lsls	r0, r2, #23
 800320a:	d503      	bpl.n	8003214 <HAL_UART_IRQHandler+0x118>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800320c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800320e:	f040 0001 	orr.w	r0, r0, #1
 8003212:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003214:	075e      	lsls	r6, r3, #29
 8003216:	d527      	bpl.n	8003268 <HAL_UART_IRQHandler+0x16c>
 8003218:	b129      	cbz	r1, 8003226 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800321c:	f040 0002 	orr.w	r0, r0, #2
 8003220:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003222:	0798      	lsls	r0, r3, #30
 8003224:	d424      	bmi.n	8003270 <HAL_UART_IRQHandler+0x174>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003226:	0718      	lsls	r0, r3, #28
 8003228:	d507      	bpl.n	800323a <HAL_UART_IRQHandler+0x13e>
 800322a:	f002 0020 	and.w	r0, r2, #32
 800322e:	4308      	orrs	r0, r1
 8003230:	d003      	beq.n	800323a <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003232:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003234:	f041 0108 	orr.w	r1, r1, #8
 8003238:	6461      	str	r1, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800323c:	2900      	cmp	r1, #0
 800323e:	f43f af79 	beq.w	8003134 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003242:	0699      	lsls	r1, r3, #26
 8003244:	d502      	bpl.n	800324c <HAL_UART_IRQHandler+0x150>
 8003246:	0693      	lsls	r3, r2, #26
 8003248:	f100 80ae 	bmi.w	80033a8 <HAL_UART_IRQHandler+0x2ac>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324c:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800324e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003254:	f002 0208 	and.w	r2, r2, #8
 8003258:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 800325c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800325e:	d142      	bne.n	80032e6 <HAL_UART_IRQHandler+0x1ea>
        HAL_UART_ErrorCallback(huart);
 8003260:	f7ff feda 	bl	8003018 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	6466      	str	r6, [r4, #68]	; 0x44
 8003266:	e765      	b.n	8003134 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003268:	079e      	lsls	r6, r3, #30
 800326a:	d5dc      	bpl.n	8003226 <HAL_UART_IRQHandler+0x12a>
 800326c:	2900      	cmp	r1, #0
 800326e:	d0da      	beq.n	8003226 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003270:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003272:	f040 0004 	orr.w	r0, r0, #4
 8003276:	6460      	str	r0, [r4, #68]	; 0x44
 8003278:	e7d5      	b.n	8003226 <HAL_UART_IRQHandler+0x12a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800327a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800327e:	2b21      	cmp	r3, #33	; 0x21
 8003280:	f47f af58 	bne.w	8003134 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003284:	68a3      	ldr	r3, [r4, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	f000 8092 	beq.w	80033b2 <HAL_UART_IRQHandler+0x2b6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800328e:	6a23      	ldr	r3, [r4, #32]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	6222      	str	r2, [r4, #32]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f8cc 3004 	str.w	r3, [ip, #4]
    if (--huart->TxXferCount == 0U)
 800329a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800329c:	3b01      	subs	r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	84e3      	strh	r3, [r4, #38]	; 0x26
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f47f af46 	bne.w	8003134 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032a8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80032ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b0:	f8cc 300c 	str.w	r3, [ip, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80032b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032bc:	f8cc 300c 	str.w	r3, [ip, #12]
 80032c0:	e738      	b.n	8003134 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032c2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  huart->gState = HAL_UART_STATE_READY;
 80032c6:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032cc:	f8cc 300c 	str.w	r3, [ip, #12]
  HAL_UART_TxCpltCallback(huart);
 80032d0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80032d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80032d6:	f7fd fbfb 	bl	8000ad0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80032da:	e72b      	b.n	8003134 <HAL_UART_IRQHandler+0x38>
}
 80032dc:	b002      	add	sp, #8
 80032de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80032e2:	f7ff bea5 	b.w	8003030 <UART_Receive_IT.isra.0>
        UART_EndRxTransfer(huart);
 80032e6:	f7ff fd85 	bl	8002df4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ea:	696b      	ldr	r3, [r5, #20]
 80032ec:	065e      	lsls	r6, r3, #25
 80032ee:	d51c      	bpl.n	800332a <HAL_UART_IRQHandler+0x22e>
 80032f0:	e000      	b.n	80032f4 <HAL_UART_IRQHandler+0x1f8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	6825      	ldr	r5, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	f105 0314 	add.w	r3, r5, #20
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	f105 0114 	add.w	r1, r5, #20
 8003304:	e841 3200 	strex	r2, r3, [r1]
 8003308:	2a00      	cmp	r2, #0
 800330a:	d1f2      	bne.n	80032f2 <HAL_UART_IRQHandler+0x1f6>
          if (huart->hdmarx != NULL)
 800330c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800330e:	b160      	cbz	r0, 800332a <HAL_UART_IRQHandler+0x22e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003310:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <HAL_UART_IRQHandler+0x2d0>)
 8003312:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003314:	f7fe f968 	bl	80015e8 <HAL_DMA_Abort_IT>
 8003318:	2800      	cmp	r0, #0
 800331a:	f43f af0b 	beq.w	8003134 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003320:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8003322:	b002      	add	sp, #8
 8003324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003328:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800332a:	4620      	mov	r0, r4
 800332c:	f7ff fe74 	bl	8003018 <HAL_UART_ErrorCallback>
 8003330:	e700      	b.n	8003134 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003332:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003334:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003336:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8003338:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800333a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800333c:	2b00      	cmp	r3, #0
 800333e:	f43f aef9 	beq.w	8003134 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003342:	1a52      	subs	r2, r2, r1
 8003344:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8003346:	2900      	cmp	r1, #0
 8003348:	f43f aef4 	beq.w	8003134 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	f10c 030c 	add.w	r3, ip, #12
 8003350:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	f10c 000c 	add.w	r0, ip, #12
 800335c:	e840 3200 	strex	r2, r3, [r0]
 8003360:	2a00      	cmp	r2, #0
 8003362:	d1f3      	bne.n	800334c <HAL_UART_IRQHandler+0x250>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	f10c 0314 	add.w	r3, ip, #20
 8003368:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	f10c 0014 	add.w	r0, ip, #20
 8003374:	e840 3200 	strex	r2, r3, [r0]
 8003378:	2a00      	cmp	r2, #0
 800337a:	d1f3      	bne.n	8003364 <HAL_UART_IRQHandler+0x268>
        huart->RxState = HAL_UART_STATE_READY;
 800337c:	2320      	movs	r3, #32
 800337e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	f10c 030c 	add.w	r3, ip, #12
 8003388:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	f10c 000c 	add.w	r0, ip, #12
 8003394:	e840 3200 	strex	r2, r3, [r0]
 8003398:	2a00      	cmp	r2, #0
 800339a:	d1f3      	bne.n	8003384 <HAL_UART_IRQHandler+0x288>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800339c:	2302      	movs	r3, #2
 800339e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff fe43 	bl	800302c <HAL_UARTEx_RxEventCallback>
 80033a6:	e6c5      	b.n	8003134 <HAL_UART_IRQHandler+0x38>
        UART_Receive_IT(huart);
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff fe41 	bl	8003030 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	6825      	ldr	r5, [r4, #0]
 80033b0:	e74c      	b.n	800324c <HAL_UART_IRQHandler+0x150>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	6923      	ldr	r3, [r4, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f47f af6a 	bne.w	800328e <HAL_UART_IRQHandler+0x192>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ba:	6a23      	ldr	r3, [r4, #32]
 80033bc:	f833 2b02 	ldrh.w	r2, [r3], #2
 80033c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c4:	f8cc 2004 	str.w	r2, [ip, #4]
      huart->pTxBuffPtr += 2U;
 80033c8:	6223      	str	r3, [r4, #32]
 80033ca:	e766      	b.n	800329a <HAL_UART_IRQHandler+0x19e>
 80033cc:	0800301d 	.word	0x0800301d

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	4d0d      	ldr	r5, [pc, #52]	; (8003408 <__libc_init_array+0x38>)
 80033d4:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d6:	1b64      	subs	r4, r4, r5
 80033d8:	10a4      	asrs	r4, r4, #2
 80033da:	2600      	movs	r6, #0
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	4d0b      	ldr	r5, [pc, #44]	; (8003410 <__libc_init_array+0x40>)
 80033e2:	4c0c      	ldr	r4, [pc, #48]	; (8003414 <__libc_init_array+0x44>)
 80033e4:	f000 f818 	bl	8003418 <_init>
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	2600      	movs	r6, #0
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	08003458 	.word	0x08003458
 800340c:	08003458 	.word	0x08003458
 8003410:	08003458 	.word	0x08003458
 8003414:	0800345c 	.word	0x0800345c

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
